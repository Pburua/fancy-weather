/*! For license information please see app.js.LICENSE */
!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="../",n(n.s=14)}([,,,,,,,,,,,,,,function(t,e,n){n(18),t.exports=n(17)},function(t,e,n){},function(t,e,n){t.exports=function(){"use strict";var t=["bubbles","cancelable","view","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","pageX","pageY"],e=[!1,!1,null,0,0,0,0,!1,!1,!1,!1,0,null,0,0];function n(n,i){i=i||Object.create(null);var o=document.createEvent("Event");o.initEvent(n,i.bubbles||!1,i.cancelable||!1);for(var r,a=2;a<t.length;a++)o[r=t[a]]=i[r]||e[a];o.buttons=i.buttons||0;var s;return s=void 0!==i.pressure&&o.buttons?i.pressure:o.buttons?.5:0,o.x=o.clientX,o.y=o.clientY,o.pointerId=i.pointerId||0,o.width=i.width||1,o.height=i.height||1,o.pressure=s,o.tiltX=i.tiltX||0,o.tiltY=i.tiltY||0,o.twist=i.twist||0,o.tangentialPressure=i.tangentialPressure||0,o.pointerType=i.pointerType||"",o.hwTimestamp=i.hwTimestamp||0,o.isPrimary=i.isPrimary||!1,o.detail=0,o}var i=window.Map&&window.Map.prototype.forEach?Map:o;function o(){this.array=[],this.size=0}o.prototype={set:function(t,e){if(void 0===e)return this.delete(t);this.has(t)||this.size++,this.array[t]=e},has:function(t){return void 0!==this.array[t]},delete:function(t){this.has(t)&&(delete this.array[t],this.size--)},get:function(t){return this.array[t]},clear:function(){this.array.length=0,this.size=0},forEach:function(t,e){return this.array.forEach((function(n,i){t.call(e,n,i,this)}),this)}};var r=["bubbles","cancelable","view","detail","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","buttons","pointerId","width","height","pressure","tiltX","tiltY","pointerType","hwTimestamp","isPrimary","type","target","currentTarget","which","pageX","pageY","timeStamp"],a=[!1,!1,null,null,0,0,0,0,!1,!1,!1,!1,0,null,0,0,0,0,0,0,0,"",0,!1,"",null,null,0,0,0,0],s={pointerover:1,pointerout:1,pointerenter:1,pointerleave:1},u="undefined"!=typeof SVGElementInstance,l={pointermap:new i,eventMap:Object.create(null),captureInfo:Object.create(null),eventSources:Object.create(null),eventSourceList:[],registerSource:function(t,e){var n=e,i=n.events;i&&(i.forEach((function(t){n[t]&&(this.eventMap[t]=n[t].bind(n))}),this),this.eventSources[t]=n,this.eventSourceList.push(n))},register:function(t){for(var e,n=this.eventSourceList.length,i=0;i<n&&(e=this.eventSourceList[i]);i++)e.register.call(e,t)},unregister:function(t){for(var e,n=this.eventSourceList.length,i=0;i<n&&(e=this.eventSourceList[i]);i++)e.unregister.call(e,t)},contains:function(t,e){try{return t.contains(e)}catch(t){return!1}},down:function(t){t.bubbles=!0,this.fireEvent("pointerdown",t)},move:function(t){t.bubbles=!0,this.fireEvent("pointermove",t)},up:function(t){t.bubbles=!0,this.fireEvent("pointerup",t)},enter:function(t){t.bubbles=!1,this.fireEvent("pointerenter",t)},leave:function(t){t.bubbles=!1,this.fireEvent("pointerleave",t)},over:function(t){t.bubbles=!0,this.fireEvent("pointerover",t)},out:function(t){t.bubbles=!0,this.fireEvent("pointerout",t)},cancel:function(t){t.bubbles=!0,this.fireEvent("pointercancel",t)},leaveOut:function(t){this.out(t),this.propagate(t,this.leave,!1)},enterOver:function(t){this.over(t),this.propagate(t,this.enter,!0)},eventHandler:function(t){if(!t._handledByPE){var e=t.type,n=this.eventMap&&this.eventMap[e];n&&n(t),t._handledByPE=!0}},listen:function(t,e){e.forEach((function(e){this.addEvent(t,e)}),this)},unlisten:function(t,e){e.forEach((function(e){this.removeEvent(t,e)}),this)},addEvent:function(t,e){t.addEventListener(e,this.boundHandler)},removeEvent:function(t,e){t.removeEventListener(e,this.boundHandler)},makeEvent:function(t,e){this.captureInfo[e.pointerId]&&(e.relatedTarget=null);var i=new n(t,e);return e.preventDefault&&(i.preventDefault=e.preventDefault),i._target=i._target||e.target,i},fireEvent:function(t,e){var n=this.makeEvent(t,e);return this.dispatchEvent(n)},cloneEvent:function(t){for(var e,n=Object.create(null),i=0;i<r.length;i++)n[e=r[i]]=t[e]||a[i],!u||"target"!==e&&"relatedTarget"!==e||n[e]instanceof SVGElementInstance&&(n[e]=n[e].correspondingUseElement);return t.preventDefault&&(n.preventDefault=function(){t.preventDefault()}),n},getTarget:function(t){var e=this.captureInfo[t.pointerId];return e?t._target!==e&&t.type in s?void 0:e:t._target},propagate:function(t,e,n){for(var i=t.target,o=[];null!=i&&i!==document&&!i.contains(t.relatedTarget);)if(o.push(i),!(i=i.parentNode))return;n&&o.reverse(),o.forEach((function(n){t.target=n,e.call(this,t)}),this)},setCapture:function(t,e,i){this.captureInfo[t]&&this.releaseCapture(t,i),this.captureInfo[t]=e,this.implicitRelease=this.releaseCapture.bind(this,t,i),document.addEventListener("pointerup",this.implicitRelease),document.addEventListener("pointercancel",this.implicitRelease);var o=new n("gotpointercapture",{bubbles:!0});o.pointerId=t,o._target=e,i||this.asyncDispatchEvent(o)},releaseCapture:function(t,e){var i=this.captureInfo[t];if(i){this.captureInfo[t]=void 0,document.removeEventListener("pointerup",this.implicitRelease),document.removeEventListener("pointercancel",this.implicitRelease);var o=new n("lostpointercapture",{bubbles:!0});o.pointerId=t,o._target=i,e||this.asyncDispatchEvent(o)}},dispatchEvent:function(t){var e=this.getTarget(t);if(e)return e.dispatchEvent(t)},asyncDispatchEvent:function(t){requestAnimationFrame(this.dispatchEvent.bind(this,t))}};l.boundHandler=l.eventHandler.bind(l);var h={shadow:function(t){if(t)return t.shadowRoot||t.webkitShadowRoot},canTarget:function(t){return t&&Boolean(t.elementFromPoint)},targetingShadow:function(t){var e=this.shadow(t);if(this.canTarget(e))return e},olderShadow:function(t){var e=t.olderShadowRoot;if(!e){var n=t.querySelector("shadow");n&&(e=n.olderShadowRoot)}return e},allShadows:function(t){for(var e=[],n=this.shadow(t);n;)e.push(n),n=this.olderShadow(n);return e},searchRoot:function(t,e,n){if(t){var i,o,r=t.elementFromPoint(e,n);for(o=this.targetingShadow(r);o;){if(i=o.elementFromPoint(e,n)){var a=this.targetingShadow(i);return this.searchRoot(a,e,n)||i}o=this.olderShadow(o)}return r}},owner:function(t){for(var e=t;e.parentNode;)e=e.parentNode;return e.nodeType!==Node.DOCUMENT_NODE&&e.nodeType!==Node.DOCUMENT_FRAGMENT_NODE&&(e=document),e},findTarget:function(t){var e=t.clientX,n=t.clientY,i=this.owner(t.target);return i.elementFromPoint(e,n)||(i=document),this.searchRoot(i,e,n)}},c=Array.prototype.forEach.call.bind(Array.prototype.forEach),p=Array.prototype.map.call.bind(Array.prototype.map),f=Array.prototype.slice.call.bind(Array.prototype.slice),d=Array.prototype.filter.call.bind(Array.prototype.filter),_=window.MutationObserver||window.WebKitMutationObserver,g={subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0,attributeFilter:["touch-action"]};function v(t,e,n,i){this.addCallback=t.bind(i),this.removeCallback=e.bind(i),this.changedCallback=n.bind(i),_&&(this.observer=new _(this.mutationWatcher.bind(this)))}function y(t){return"{ -ms-touch-action: "+t+"; touch-action: "+t+"; }"}v.prototype={watchSubtree:function(t){this.observer&&h.canTarget(t)&&this.observer.observe(t,g)},enableOnSubtree:function(t){this.watchSubtree(t),t===document&&"complete"!==document.readyState?this.installOnLoad():this.installNewSubtree(t)},installNewSubtree:function(t){c(this.findElements(t),this.addElement,this)},findElements:function(t){return t.querySelectorAll?t.querySelectorAll("[touch-action]"):[]},removeElement:function(t){this.removeCallback(t)},addElement:function(t){this.addCallback(t)},elementChanged:function(t,e){this.changedCallback(t,e)},concatLists:function(t,e){return t.concat(f(e))},installOnLoad:function(){document.addEventListener("readystatechange",function(){"complete"===document.readyState&&this.installNewSubtree(document)}.bind(this))},isElement:function(t){return t.nodeType===Node.ELEMENT_NODE},flattenMutationTree:function(t){var e=p(t,this.findElements,this);return e.push(d(t,this.isElement)),e.reduce(this.concatLists,[])},mutationWatcher:function(t){t.forEach(this.mutationHandler,this)},mutationHandler:function(t){"childList"===t.type?(this.flattenMutationTree(t.addedNodes).forEach(this.addElement,this),this.flattenMutationTree(t.removedNodes).forEach(this.removeElement,this)):"attributes"===t.type&&this.elementChanged(t.target,t.oldValue)}};var m=[{selector:'[touch-action="none"]',value:"none"},{selector:'[touch-action="auto"]',value:"auto"},{selector:'[touch-action~="pan-x"]',value:"pan-x"},{selector:'[touch-action~="pan-y"]',value:"pan-y"},{selector:'[touch-action~="pan-up"]',value:"pan-up"},{selector:'[touch-action~="pan-down"]',value:"pan-down"},{selector:'[touch-action~="pan-left"]',value:"pan-left"},{selector:'[touch-action~="pan-right"]',value:"pan-right"}],E="",T=window.PointerEvent||window.MSPointerEvent,w=!window.ShadowDOMPolyfill&&document.head.createShadowRoot,x=l.pointermap,C=[1,4,2,8,16],b=!1;try{b=1===new MouseEvent("test",{buttons:1}).buttons}catch(t){}var O,S={POINTER_ID:1,POINTER_TYPE:"mouse",events:["mousedown","webkitmouseforcechanged","mousemove","mouseup","mouseover","mouseout"],register:function(t){l.listen(t,this.events)},unregister:function(t){l.unlisten(t,this.events)},lastTouches:[],isEventSimulatedFromTouch:function(t){for(var e,n=this.lastTouches,i=t.clientX,o=t.clientY,r=0,a=n.length;r<a&&(e=n[r]);r++){var s=Math.abs(i-e.x),u=Math.abs(o-e.y);if(s<=25&&u<=25)return!0}},prepareEvent:function(t){var e=l.cloneEvent(t),n=e.preventDefault;return e.preventDefault=function(){t.preventDefault(),n()},e.pointerId=this.POINTER_ID,e.isPrimary=!0,e.pointerType=this.POINTER_TYPE,"webkitForce"in t&&(e.pressure=t.webkitForce-MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN),e},prepareButtonsForMove:function(t,e){var n=x.get(this.POINTER_ID);0!==e.which&&n?t.buttons=n.buttons:t.buttons=0,e.buttons=t.buttons},mousedown:function(t){if(!this.isEventSimulatedFromTouch(t)){var e=x.get(this.POINTER_ID),n=this.prepareEvent(t);b||(n.buttons=C[n.button],e&&(n.buttons|=e.buttons),t.buttons=n.buttons),x.set(this.POINTER_ID,t),e&&0!==e.buttons?l.move(n):l.down(n)}},webkitmouseforcechanged:function(t){this.mousemove(t)},mousemove:function(t){if(!this.isEventSimulatedFromTouch(t)){var e=this.prepareEvent(t);b||this.prepareButtonsForMove(e,t),e.button=-1,x.set(this.POINTER_ID,t),l.move(e)}},mouseup:function(t){if(!this.isEventSimulatedFromTouch(t)){var e=x.get(this.POINTER_ID),n=this.prepareEvent(t);if(!b){var i=C[n.button];n.buttons=e?e.buttons&~i:0,t.buttons=n.buttons}x.set(this.POINTER_ID,t),n.buttons&=~C[n.button],0===n.buttons?l.up(n):l.move(n)}},mouseover:function(t){if(!this.isEventSimulatedFromTouch(t)){var e=this.prepareEvent(t);b||this.prepareButtonsForMove(e,t),e.button=-1,x.set(this.POINTER_ID,t),l.enterOver(e)}},mouseout:function(t){if(!this.isEventSimulatedFromTouch(t)){var e=this.prepareEvent(t);b||this.prepareButtonsForMove(e,t),e.button=-1,l.leaveOut(e)}},cancel:function(t){var e=this.prepareEvent(t);l.cancel(e),this.deactivateMouse()},deactivateMouse:function(){x.delete(this.POINTER_ID)}},P=l.captureInfo,R=h.findTarget.bind(h),I=h.allShadows.bind(h),M=l.pointermap,L={events:["touchstart","touchmove","touchforcechange","touchend","touchcancel"],register:function(t){O.enableOnSubtree(t)},unregister:function(){},elementAdded:function(t){var e=t.getAttribute("touch-action"),n=this.touchActionToScrollType(e);"number"==typeof n&&(t._scrollType=n,l.listen(t,this.events),I(t).forEach((function(t){t._scrollType=n,l.listen(t,this.events)}),this))},elementRemoved:function(t){if(M.size>0){var e=this.events;t.addEventListener("touchend",(function(){t._scrollType=void 0,l.unlisten(t,e)}))}else t._scrollType=void 0,l.unlisten(t,this.events);I(t).forEach((function(t){t._scrollType=void 0,l.unlisten(t,this.events)}),this)},elementChanged:function(t,e){var n=t.getAttribute("touch-action"),i=this.touchActionToScrollType(n),o=this.touchActionToScrollType(e);"number"==typeof i&&"number"==typeof o?(t._scrollType=i,I(t).forEach((function(t){t._scrollType=i}),this)):"number"==typeof o?this.elementRemoved(t):"number"==typeof i&&this.elementAdded(t)},scrollTypes:{UP:function(t){return t.includes("pan-y")||t.includes("pan-up")?1:0},DOWN:function(t){return t.includes("pan-y")||t.includes("pan-down")?2:0},LEFT:function(t){return t.includes("pan-x")||t.includes("pan-left")?4:0},RIGHT:function(t){return t.includes("pan-x")||t.includes("pan-right")?8:0}},touchActionToScrollType:function(t){if(t){if("auto"===t)return 15;if("none"===t)return 0;var e=t.split(" "),n=this.scrollTypes;return n.UP(e)|n.DOWN(e)|n.LEFT(e)|n.RIGHT(e)}},POINTER_TYPE:"touch",firstTouch:null,isPrimaryTouch:function(t){return this.firstTouch===t.identifier},setPrimaryTouch:function(t){(0===M.size||1===M.size&&M.has(1))&&(this.firstTouch=t.identifier,this.firstXY={X:t.clientX,Y:t.clientY},this.scrolling=!1)},removePrimaryPointer:function(t){t.isPrimary&&(this.firstTouch=null,this.firstXY=null)},typeToButtons:function(t){var e=0;return"touchstart"!==t&&"touchmove"!==t&&"touchforcechange"!==t||(e=1),e},touchToPointer:function(t){var e=this.currentTouchEvent,n=l.cloneEvent(t),i=n.pointerId=t.identifier+2;if(n.target=P[i]||R(n),n.bubbles=!0,n.cancelable=!0,n.button=0,n.buttons=this.typeToButtons(e.type),n.width=2*(t.radiusX||t.webkitRadiusX||0),n.height=2*(t.radiusY||t.webkitRadiusY||0),n.pressure=void 0!==t.force?t.force:void 0!==t.webkitForce?t.webkitForce:void 0,n.isPrimary=this.isPrimaryTouch(t),t.altitudeAngle){var o=Math.tan(t.altitudeAngle),r=180/Math.PI;n.tiltX=Math.atan(Math.cos(t.azimuthAngle)/o)*r,n.tiltY=Math.atan(Math.sin(t.azimuthAngle)/o)*r}else n.tiltX=0,n.tiltY=0;"stylus"===t.touchType?n.pointerType="pen":n.pointerType=this.POINTER_TYPE,n.altKey=e.altKey,n.ctrlKey=e.ctrlKey,n.metaKey=e.metaKey,n.shiftKey=e.shiftKey;var a=this;return n.preventDefault=function(){a.scrolling=!1,a.firstXY=null,e.preventDefault()},n},processTouches:function(t,e){var n=t.changedTouches;this.currentTouchEvent=t;for(var i,o=0;o<n.length;o++)i=n[o],e.call(this,this.touchToPointer(i))},shouldScroll:function(t){if(this.firstXY){var e,n=t.currentTarget._scrollType;if(0===n)e=!1;else if(15===n)e=!0;else{var i=t.changedTouches[0],o=i.clientY-this.firstXY.Y,r=Math.abs(o),a=i.clientX-this.firstXY.X,s=Math.abs(a),u=1&n,l=2&n,h=4&n,c=8&n;h&&c?e=s>r:h?e=s>r&&a>0:c&&(e=s>r&&a<0),e||(u&&l?e=s<r:u?e=s<r&&o>0:l&&(e=s<r&&o<0))}return this.firstXY=null,e}},findTouch:function(t,e){for(var n,i=0,o=t.length;i<o&&(n=t[i]);i++)if(n.identifier===e)return!0},vacuumTouches:function(t){var e=t.touches;if(M.size>=e.length){var n=[];M.forEach((function(t,i){if(1!==i&&!this.findTouch(e,i-2)){var o=t.out;n.push(o)}}),this),n.forEach(this.cancelOut,this)}},touchstart:function(t){this.vacuumTouches(t),this.setPrimaryTouch(t.changedTouches[0]),this.dedupSynthMouse(t),this.scrolling||this.processTouches(t,this.overDown)},overDown:function(t){M.set(t.pointerId,{target:t.target,out:t,outTarget:t.target}),l.enterOver(t),l.down(t)},touchforcechange:function(t){this.touchmove(t)},touchmove:function(t){this.scrolling||(this.shouldScroll(t)?(this.scrolling=!0,this.touchcancel(t)):("touchforcechange"!==t.type&&t.preventDefault(),this.processTouches(t,this.moveOverOut)))},moveOverOut:function(t){var e=t,n=M.get(e.pointerId);if(n){var i=n.out,o=n.outTarget;l.move(e),i&&o!==e.target&&(i.relatedTarget=e.target,e.relatedTarget=o,i.target=o,e.target?(l.leaveOut(i),l.enterOver(e)):(e.target=o,e.relatedTarget=null,this.cancelOut(e))),n.out=e,n.outTarget=e.target}},touchend:function(t){this.dedupSynthMouse(t),this.processTouches(t,this.upOut)},upOut:function(t){this.scrolling||(l.up(t),l.leaveOut(t)),this.cleanUpPointer(t)},touchcancel:function(t){this.processTouches(t,this.cancelOut)},cancelOut:function(t){l.cancel(t),l.leaveOut(t),this.cleanUpPointer(t)},cleanUpPointer:function(t){M.delete(t.pointerId),this.removePrimaryPointer(t)},dedupSynthMouse:function(t){var e=S.lastTouches,n=t.changedTouches[0];if(this.isPrimaryTouch(n)){var i={x:n.clientX,y:n.clientY};e.push(i);var o=function(t,e){var n=t.indexOf(e);n>-1&&t.splice(n,1)}.bind(null,e,i);setTimeout(o,2500)}}};O=new v(L.elementAdded,L.elementRemoved,L.elementChanged,L);var A,D,F,j=l.pointermap,N=window.MSPointerEvent&&"number"==typeof window.MSPointerEvent.MSPOINTER_TYPE_MOUSE,k={events:["MSPointerDown","MSPointerMove","MSPointerUp","MSPointerOut","MSPointerOver","MSPointerCancel","MSGotPointerCapture","MSLostPointerCapture"],register:function(t){l.listen(t,this.events)},unregister:function(t){l.unlisten(t,this.events)},POINTER_TYPES:["","unavailable","touch","pen","mouse"],prepareEvent:function(t){var e=t;return N&&((e=l.cloneEvent(t)).pointerType=this.POINTER_TYPES[t.pointerType]),e},cleanup:function(t){j.delete(t)},MSPointerDown:function(t){j.set(t.pointerId,t);var e=this.prepareEvent(t);l.down(e)},MSPointerMove:function(t){var e=this.prepareEvent(t);l.move(e)},MSPointerUp:function(t){var e=this.prepareEvent(t);l.up(e),this.cleanup(t.pointerId)},MSPointerOut:function(t){var e=this.prepareEvent(t);l.leaveOut(e)},MSPointerOver:function(t){var e=this.prepareEvent(t);l.enterOver(e)},MSPointerCancel:function(t){var e=this.prepareEvent(t);l.cancel(e),this.cleanup(t.pointerId)},MSLostPointerCapture:function(t){var e=l.makeEvent("lostpointercapture",t);l.dispatchEvent(e)},MSGotPointerCapture:function(t){var e=l.makeEvent("gotpointercapture",t);l.dispatchEvent(e)}};function G(t){if(!l.pointermap.has(t)){var e=new Error("NotFoundError");throw e.name="NotFoundError",e}}function z(t){for(var e=t.parentNode;e&&e!==t.ownerDocument;)e=e.parentNode;if(!e){var n=new Error("InvalidStateError");throw n.name="InvalidStateError",n}}function K(t){return 0!==l.pointermap.get(t).buttons}return window.navigator.msPointerEnabled?(A=function(t){G(t),z(this),K(t)&&(l.setCapture(t,this,!0),this.msSetPointerCapture(t))},D=function(t){G(t),l.releaseCapture(t,!0),this.msReleasePointerCapture(t)}):(A=function(t){G(t),z(this),K(t)&&l.setCapture(t,this)},D=function(t){G(t),l.releaseCapture(t)}),F=function(t){return!!l.captureInfo[t]},function(){if(T){m.forEach((function(t){E+=t.selector+y(t.value)+"\n",w&&(E+=function(t){return"body /shadow-deep/ "+t}(t.selector)+y(t.value)+"\n")}));var t=document.createElement("style");t.textContent=E,document.head.appendChild(t)}}(),function(){if(!window.PointerEvent){if(window.PointerEvent=n,window.navigator.msPointerEnabled){var t=window.navigator.msMaxTouchPoints;Object.defineProperty(window.navigator,"maxTouchPoints",{value:t,enumerable:!0}),l.registerSource("ms",k)}else Object.defineProperty(window.navigator,"maxTouchPoints",{value:0,enumerable:!0}),l.registerSource("mouse",S),void 0!==window.ontouchstart&&l.registerSource("touch",L);l.register(document)}}(),window.Element&&!Element.prototype.setPointerCapture&&Object.defineProperties(Element.prototype,{setPointerCapture:{value:A},releasePointerCapture:{value:D},hasPointerCapture:{value:F}}),{dispatcher:l,Installer:v,PointerEvent:n,PointerMap:i,targetFinding:h}}()},function(t,e,n){},function(t,e,n){"use strict";function i(){return function(){throw new Error("Unimplemented abstract method.")}()}n.r(e),n(15);var o=0;function r(t){return t.ol_uid||(t.ol_uid=String(++o))}var a,s="6.1.1",u=(a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),l=function(t){function e(e){var n=this,i="Assertion failed. See https://openlayers.org/en/"+("latest"===s?s:"v"+s.split("-")[0])+"/doc/errors/#"+e+" for details.";return(n=t.call(this,i)||this).code=e,n.name="AssertionError",n.message=i,n}return u(e,t),e}(Error),h={ADD:"add",REMOVE:"remove"},c="propertychange",p="function"==typeof Object.assign?Object.assign:function(t,e){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(t),i=1,o=arguments.length;i<o;++i){var r=arguments[i];if(null!=r)for(var a in r)r.hasOwnProperty(a)&&(n[a]=r[a])}return n};function f(t){for(var e in t)delete t[e]}var d="function"==typeof Object.values?Object.values:function(t){var e=[];for(var n in t)e.push(t[n]);return e};function _(t,e,n,i,o){if(i&&i!==t&&(n=n.bind(i)),o){var r=n;n=function(){t.removeEventListener(e,n),r.apply(this,arguments)}}var a={target:t,type:e,listener:n};return t.addEventListener(e,n),a}function g(t,e,n,i){return _(t,e,n,i,!0)}function v(t){t&&t.target&&(t.target.removeEventListener(t.type,t.listener),f(t))}var y=function(){function t(){this.disposed_=!1}return t.prototype.dispose=function(){this.disposed_||(this.disposed_=!0,this.disposeInternal())},t.prototype.disposeInternal=function(){},t}();function m(t,e){return t>e?1:t<e?-1:0}function E(t,e,n){var i=t.length;if(t[0]<=e)return 0;if(e<=t[i-1])return i-1;var o=void 0;if(n>0){for(o=1;o<i;++o)if(t[o]<e)return o-1}else if(n<0){for(o=1;o<i;++o)if(t[o]<=e)return o}else for(o=1;o<i;++o){if(t[o]==e)return o;if(t[o]<e)return t[o-1]-e<e-t[o]?o-1:o}return i-1}function T(t,e){var n=t.length;if(n!==e.length)return!1;for(var i=0;i<n;i++)if(t[i]!==e[i])return!1;return!0}function w(){return!0}function x(){return!1}function C(){}var b=function(){function t(t){this.propagationStopped,this.type=t,this.target=null}return t.prototype.preventDefault=function(){this.propagationStopped=!0},t.prototype.stopPropagation=function(){this.propagationStopped=!0},t}(),O=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),S=function(t){function e(e){var n=t.call(this)||this;return n.eventTarget_=e,n.pendingRemovals_={},n.dispatching_={},n.listeners_={},n}return O(e,t),e.prototype.addEventListener=function(t,e){if(t&&e){var n=this.listeners_[t];n||(n=[],this.listeners_[t]=n),-1===n.indexOf(e)&&n.push(e)}},e.prototype.dispatchEvent=function(t){var e="string"==typeof t?new b(t):t,n=e.type;e.target||(e.target=this.eventTarget_||this);var i,o=this.listeners_[n];if(o){n in this.dispatching_||(this.dispatching_[n]=0,this.pendingRemovals_[n]=0),++this.dispatching_[n];for(var r=0,a=o.length;r<a;++r)if(!1===o[r].call(this,e)||e.propagationStopped){i=!1;break}if(--this.dispatching_[n],0===this.dispatching_[n]){var s=this.pendingRemovals_[n];for(delete this.pendingRemovals_[n];s--;)this.removeEventListener(n,C);delete this.dispatching_[n]}return i}},e.prototype.disposeInternal=function(){f(this.listeners_)},e.prototype.getListeners=function(t){return this.listeners_[t]},e.prototype.hasListener=function(t){return t?t in this.listeners_:Object.keys(this.listeners_).length>0},e.prototype.removeEventListener=function(t,e){var n=this.listeners_[t];if(n){var i=n.indexOf(e);-1!==i&&(t in this.pendingRemovals_?(n[i]=C,++this.pendingRemovals_[t]):(n.splice(i,1),0===n.length&&delete this.listeners_[t]))}},e}(y),P={CHANGE:"change",ERROR:"error",BLUR:"blur",CLEAR:"clear",CONTEXTMENU:"contextmenu",CLICK:"click",DBLCLICK:"dblclick",DRAGENTER:"dragenter",DRAGOVER:"dragover",DROP:"drop",FOCUS:"focus",KEYDOWN:"keydown",KEYPRESS:"keypress",LOAD:"load",RESIZE:"resize",WHEEL:"wheel"},R=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),I=function(t){function e(){var e=t.call(this)||this;return e.revision_=0,e}return R(e,t),e.prototype.changed=function(){++this.revision_,this.dispatchEvent(P.CHANGE)},e.prototype.getRevision=function(){return this.revision_},e.prototype.on=function(t,e){if(Array.isArray(t)){for(var n=t.length,i=new Array(n),o=0;o<n;++o)i[o]=_(this,t[o],e);return i}return _(this,t,e)},e.prototype.once=function(t,e){if(Array.isArray(t)){for(var n=t.length,i=new Array(n),o=0;o<n;++o)i[o]=g(this,t[o],e);return i}return g(this,t,e)},e.prototype.un=function(t,e){if(Array.isArray(t))for(var n=0,i=t.length;n<i;++n)this.removeEventListener(t[n],e);else this.removeEventListener(t,e)},e}(S),M=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),L=function(t){function e(e,n,i){var o=t.call(this,e)||this;return o.key=n,o.oldValue=i,o}return M(e,t),e}(b),A=function(t){function e(e){var n=t.call(this)||this;return r(n),n.values_={},void 0!==e&&n.setProperties(e),n}return M(e,t),e.prototype.get=function(t){var e;return this.values_.hasOwnProperty(t)&&(e=this.values_[t]),e},e.prototype.getKeys=function(){return Object.keys(this.values_)},e.prototype.getProperties=function(){return p({},this.values_)},e.prototype.notify=function(t,e){var n;n=F(t),this.dispatchEvent(new L(n,t,e)),n=c,this.dispatchEvent(new L(n,t,e))},e.prototype.set=function(t,e,n){if(n)this.values_[t]=e;else{var i=this.values_[t];this.values_[t]=e,i!==e&&this.notify(t,i)}},e.prototype.setProperties=function(t,e){for(var n in t)this.set(n,t[n],e)},e.prototype.unset=function(t,e){if(t in this.values_){var n=this.values_[t];delete this.values_[t],e||this.notify(t,n)}},e}(I),D={};function F(t){return D.hasOwnProperty(t)?D[t]:D[t]="change:"+t}var j=A,N=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),k="length",G=function(t){function e(e,n,i){var o=t.call(this,e)||this;return o.element=n,o.index=i,o}return N(e,t),e}(b),z=function(t){function e(e,n){var i=t.call(this)||this,o=n||{};if(i.unique_=!!o.unique,i.array_=e||[],i.unique_)for(var r=0,a=i.array_.length;r<a;++r)i.assertUnique_(i.array_[r],r);return i.updateLength_(),i}return N(e,t),e.prototype.clear=function(){for(;this.getLength()>0;)this.pop()},e.prototype.extend=function(t){for(var e=0,n=t.length;e<n;++e)this.push(t[e]);return this},e.prototype.forEach=function(t){for(var e=this.array_,n=0,i=e.length;n<i;++n)t(e[n],n,e)},e.prototype.getArray=function(){return this.array_},e.prototype.item=function(t){return this.array_[t]},e.prototype.getLength=function(){return this.get(k)},e.prototype.insertAt=function(t,e){this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new G(h.ADD,e,t))},e.prototype.pop=function(){return this.removeAt(this.getLength()-1)},e.prototype.push=function(t){this.unique_&&this.assertUnique_(t);var e=this.getLength();return this.insertAt(e,t),this.getLength()},e.prototype.remove=function(t){for(var e=this.array_,n=0,i=e.length;n<i;++n)if(e[n]===t)return this.removeAt(n)},e.prototype.removeAt=function(t){var e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new G(h.REMOVE,e,t)),e},e.prototype.setAt=function(t,e){var n=this.getLength();if(t<n){this.unique_&&this.assertUnique_(e,t);var i=this.array_[t];this.array_[t]=e,this.dispatchEvent(new G(h.REMOVE,i,t)),this.dispatchEvent(new G(h.ADD,e,t))}else{for(var o=n;o<t;++o)this.insertAt(o,void 0);this.insertAt(t,e)}},e.prototype.updateLength_=function(){this.set(k,this.array_.length)},e.prototype.assertUnique_=function(t,e){for(var n=0,i=this.array_.length;n<i;++n)if(this.array_[n]===t&&n!==e)throw new l(58)},e}(j),K=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),X=function(t){function e(e,n,i){var o=t.call(this,e)||this;return o.map=n,o.frameState=void 0!==i?i:null,o}return K(e,t),e}(b),Y=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Z=function(t){function e(e,n,i,o,r){var a=t.call(this,e,n,r)||this;return a.originalEvent=i,a.pixel_=null,a.coordinate_=null,a.dragging=void 0!==o&&o,a}return Y(e,t),Object.defineProperty(e.prototype,"pixel",{get:function(){return this.pixel_||(this.pixel_=this.map.getEventPixel(this.originalEvent)),this.pixel_},set:function(t){this.pixel_=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"coordinate",{get:function(){return this.coordinate_||(this.coordinate_=this.map.getCoordinateFromPixel(this.pixel)),this.coordinate_},set:function(t){this.coordinate_=t},enumerable:!0,configurable:!0}),e.prototype.preventDefault=function(){t.prototype.preventDefault.call(this),this.originalEvent.preventDefault()},e.prototype.stopPropagation=function(){t.prototype.stopPropagation.call(this),this.originalEvent.stopPropagation()},e}(X),U=(n(16),"undefined"!=typeof navigator?navigator.userAgent.toLowerCase():""),W=-1!==U.indexOf("firefox"),V=(-1!==U.indexOf("safari")&&U.indexOf("chrom"),-1!==U.indexOf("webkit")&&-1==U.indexOf("edge")),B=-1!==U.indexOf("macintosh"),H=window.devicePixelRatio||1,q="undefined"!=typeof Image&&Image.prototype.decode,$={SINGLECLICK:"singleclick",CLICK:P.CLICK,DBLCLICK:P.DBLCLICK,POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},J=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Q=function(t){function e(e,n,i,o,r){var a=t.call(this,e,n,i,o,r)||this;return a.pointerEvent=i,a}return J(e,t),e}(Z),tt={POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},et=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),nt=function(t){function e(e,n){var i=t.call(this,e)||this;i.map_=e,i.clickTimeoutId_,i.dragging_=!1,i.dragListenerKeys_=[],i.moveTolerance_=n?n*H:H,i.down_=null;var o=i.map_.getViewport();return i.activePointers_=0,i.trackedTouches_={},i.element_=o,i.pointerdownListenerKey_=_(o,tt.POINTERDOWN,i.handlePointerDown_,i),i.relayedListenerKey_=_(o,tt.POINTERMOVE,i.relayEvent_,i),i}return et(e,t),e.prototype.emulateClick_=function(t){var e=new Q($.CLICK,this.map_,t);this.dispatchEvent(e),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,e=new Q($.DBLCLICK,this.map_,t),this.dispatchEvent(e)):this.clickTimeoutId_=setTimeout(function(){this.clickTimeoutId_=void 0;var e=new Q($.SINGLECLICK,this.map_,t);this.dispatchEvent(e)}.bind(this),250)},e.prototype.updateActivePointers_=function(t){var e=t;e.type==$.POINTERUP||e.type==$.POINTERCANCEL?delete this.trackedTouches_[e.pointerId]:e.type==$.POINTERDOWN&&(this.trackedTouches_[e.pointerId]=!0),this.activePointers_=Object.keys(this.trackedTouches_).length},e.prototype.handlePointerUp_=function(t){this.updateActivePointers_(t);var e=new Q($.POINTERUP,this.map_,t);this.dispatchEvent(e),e.propagationStopped||this.dragging_||!this.isMouseActionButton_(t)||this.emulateClick_(this.down_),0===this.activePointers_&&(this.dragListenerKeys_.forEach(v),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null)},e.prototype.isMouseActionButton_=function(t){return 0===t.button},e.prototype.handlePointerDown_=function(t){this.updateActivePointers_(t);var e=new Q($.POINTERDOWN,this.map_,t);this.dispatchEvent(e),this.down_=t,0===this.dragListenerKeys_.length&&this.dragListenerKeys_.push(_(document,$.POINTERMOVE,this.handlePointerMove_,this),_(document,$.POINTERUP,this.handlePointerUp_,this),_(this.element_,$.POINTERCANCEL,this.handlePointerUp_,this))},e.prototype.handlePointerMove_=function(t){if(this.isMoving_(t)){this.dragging_=!0;var e=new Q($.POINTERDRAG,this.map_,t,this.dragging_);this.dispatchEvent(e)}},e.prototype.relayEvent_=function(t){var e=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new Q(t.type,this.map_,t,e))},e.prototype.isMoving_=function(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_},e.prototype.disposeInternal=function(){this.relayedListenerKey_&&(v(this.relayedListenerKey_),this.relayedListenerKey_=null),this.pointerdownListenerKey_&&(v(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(v),this.dragListenerKeys_.length=0,this.element_=null,t.prototype.disposeInternal.call(this)},e}(S),it="postrender",ot={LAYERGROUP:"layergroup",SIZE:"size",TARGET:"target",VIEW:"view"},rt="precompose",at="rendercomplete",st={IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4,ABORT:5};function ut(t,e){if(!t)throw new l(e)}var lt=function(){function t(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}}return t.prototype.clear=function(){this.elements_.length=0,this.priorities_.length=0,f(this.queuedElements_)},t.prototype.dequeue=function(){var t=this.elements_,e=this.priorities_,n=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));var i=this.keyFunction_(n);return delete this.queuedElements_[i],n},t.prototype.enqueue=function(t){ut(!(this.keyFunction_(t)in this.queuedElements_),31);var e=this.priorityFunction_(t);return e!=1/0&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)},t.prototype.getCount=function(){return this.elements_.length},t.prototype.getLeftChildIndex_=function(t){return 2*t+1},t.prototype.getRightChildIndex_=function(t){return 2*t+2},t.prototype.getParentIndex_=function(t){return t-1>>1},t.prototype.heapify_=function(){var t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)},t.prototype.isEmpty=function(){return 0===this.elements_.length},t.prototype.isKeyQueued=function(t){return t in this.queuedElements_},t.prototype.isQueued=function(t){return this.isKeyQueued(this.keyFunction_(t))},t.prototype.siftUp_=function(t){for(var e=this.elements_,n=this.priorities_,i=e.length,o=e[t],r=n[t],a=t;t<i>>1;){var s=this.getLeftChildIndex_(t),u=this.getRightChildIndex_(t),l=u<i&&n[u]<n[s]?u:s;e[t]=e[l],n[t]=n[l],t=l}e[t]=o,n[t]=r,this.siftDown_(a,t)},t.prototype.siftDown_=function(t,e){for(var n=this.elements_,i=this.priorities_,o=n[e],r=i[e];e>t;){var a=this.getParentIndex_(e);if(!(i[a]>r))break;n[e]=n[a],i[e]=i[a],e=a}n[e]=o,i[e]=r},t.prototype.reprioritize=function(){var t,e,n,i=this.priorityFunction_,o=this.elements_,r=this.priorities_,a=0,s=o.length;for(e=0;e<s;++e)(n=i(t=o[e]))==1/0?delete this.queuedElements_[this.keyFunction_(t)]:(r[a]=n,o[a++]=t);o.length=a,r.length=a,this.heapify_()},t}(),ht=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ct=function(t){function e(e,n){var i=t.call(this,(function(t){return e.apply(null,t)}),(function(t){return t[0].getKey()}))||this;return i.boundHandleTileChange_=i.handleTileChange.bind(i),i.tileChangeCallback_=n,i.tilesLoading_=0,i.tilesLoadingKeys_={},i}return ht(e,t),e.prototype.enqueue=function(e){var n=t.prototype.enqueue.call(this,e);return n&&e[0].addEventListener(P.CHANGE,this.boundHandleTileChange_),n},e.prototype.getTilesLoading=function(){return this.tilesLoading_},e.prototype.handleTileChange=function(t){var e=t.target,n=e.getState();if(e.hifi&&n===st.LOADED||n===st.ERROR||n===st.EMPTY||n===st.ABORT){e.removeEventListener(P.CHANGE,this.boundHandleTileChange_);var i=e.getKey();i in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[i],--this.tilesLoading_),this.tileChangeCallback_()}},e.prototype.loadMoreTiles=function(t,e){for(var n,i,o,r=0,a=!1;this.tilesLoading_<t&&r<e&&this.getCount()>0;)o=(i=this.dequeue()[0]).getKey(),(n=i.getState())===st.ABORT?a=!0:n!==st.IDLE||o in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[o]=!0,++this.tilesLoading_,++r,i.load());0===r&&a&&this.tileChangeCallback_()},e}(lt),pt=42,ft=256;function dt(t,e,n){return Math.min(Math.max(t,e),n)}var _t="cosh"in Math?Math.cosh:function(t){var e=Math.exp(t);return(e+1/e)/2};function gt(t,e,n,i,o,r){var a=o-n,s=r-i;if(0!==a||0!==s){var u=((t-n)*a+(e-i)*s)/(a*a+s*s);u>1?(n=o,i=r):u>0&&(n+=a*u,i+=s*u)}return vt(t,e,n,i)}function vt(t,e,n,i){var o=n-t,r=i-e;return o*o+r*r}function yt(t){return t*Math.PI/180}function mt(t,e){var n=t%e;return n*e<0?n+e:n}function Et(t,e,n){return t+n*(e-t)}function Tt(t,e,n){return function(i,o,r,a){if(i){var s=e?0:r[0]*o,u=e?0:r[1]*o,l=t[0]+s/2,h=t[2]-s/2,c=t[1]+u/2,p=t[3]-u/2;l>h&&(h=l=(h+l)/2),c>p&&(p=c=(p+c)/2);var f=dt(i[0],l,h),d=dt(i[1],c,p),_=30*o;return a&&n&&(f+=-_*Math.log(1+Math.max(0,l-i[0])/_)+_*Math.log(1+Math.max(0,i[0]-h)/_),d+=-_*Math.log(1+Math.max(0,c-i[1])/_)+_*Math.log(1+Math.max(0,i[1]-p)/_)),[f,d]}}}function wt(t){return t}var xt={BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",TOP_LEFT:"top-left",TOP_RIGHT:"top-right"},Ct={UNKNOWN:0,INTERSECTING:1,ABOVE:2,RIGHT:4,BELOW:8,LEFT:16};function bt(t){for(var e=[1/0,1/0,-1/0,-1/0],n=0,i=t.length;n<i;++n)At(e,t[n]);return e}function Ot(t,e,n){var i,o;return(i=e<t[0]?t[0]-e:t[2]<e?e-t[2]:0)*i+(o=n<t[1]?t[1]-n:t[3]<n?n-t[3]:0)*o}function St(t,e){return Pt(t,e[0],e[1])}function Pt(t,e,n){return t[0]<=e&&e<=t[2]&&t[1]<=n&&n<=t[3]}function Rt(t,e){var n=t[0],i=t[1],o=t[2],r=t[3],a=e[0],s=e[1],u=Ct.UNKNOWN;return a<n?u|=Ct.LEFT:a>o&&(u|=Ct.RIGHT),s<i?u|=Ct.BELOW:s>r&&(u|=Ct.ABOVE),u===Ct.UNKNOWN&&(u=Ct.INTERSECTING),u}function It(t,e,n,i,o){return o?(o[0]=t,o[1]=e,o[2]=n,o[3]=i,o):[t,e,n,i]}function Mt(t){return It(1/0,1/0,-1/0,-1/0,t)}function Lt(t,e){return t[0]==e[0]&&t[2]==e[2]&&t[1]==e[1]&&t[3]==e[3]}function At(t,e){e[0]<t[0]&&(t[0]=e[0]),e[0]>t[2]&&(t[2]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>t[3]&&(t[3]=e[1])}function Dt(t,e,n,i,o){for(;n<i;n+=o)Ft(t,e[n],e[n+1]);return t}function Ft(t,e,n){t[0]=Math.min(t[0],e),t[1]=Math.min(t[1],n),t[2]=Math.max(t[2],e),t[3]=Math.max(t[3],n)}function jt(t){var e=0;return Bt(t)||(e=Wt(t)*Xt(t)),e}function Nt(t){return[t[0],t[1]]}function kt(t){return[t[2],t[1]]}function Gt(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}function zt(t,e){var n;return e===xt.BOTTOM_LEFT?n=Nt(t):e===xt.BOTTOM_RIGHT?n=kt(t):e===xt.TOP_LEFT?n=Zt(t):e===xt.TOP_RIGHT?n=Ut(t):ut(!1,13),n}function Kt(t,e,n,i,o){var r=e*i[0]/2,a=e*i[1]/2,s=Math.cos(n),u=Math.sin(n),l=r*s,h=r*u,c=a*s,p=a*u,f=t[0],d=t[1],_=f-l+p,g=f-l-p,v=f+l-p,y=f+l+p,m=d-h-c,E=d-h+c,T=d+h+c,w=d+h-c;return It(Math.min(_,g,v,y),Math.min(m,E,T,w),Math.max(_,g,v,y),Math.max(m,E,T,w),o)}function Xt(t){return t[3]-t[1]}function Yt(t,e,n){var i=n||[1/0,1/0,-1/0,-1/0];return Vt(t,e)?(t[0]>e[0]?i[0]=t[0]:i[0]=e[0],t[1]>e[1]?i[1]=t[1]:i[1]=e[1],t[2]<e[2]?i[2]=t[2]:i[2]=e[2],t[3]<e[3]?i[3]=t[3]:i[3]=e[3]):Mt(i),i}function Zt(t){return[t[0],t[3]]}function Ut(t){return[t[2],t[3]]}function Wt(t){return t[2]-t[0]}function Vt(t,e){return t[0]<=e[2]&&t[2]>=e[0]&&t[1]<=e[3]&&t[3]>=e[1]}function Bt(t){return t[2]<t[0]||t[3]<t[1]}function Ht(t,e,n){var i=Wt(e)/n[0],o=Xt(e)/n[1];return Math.min(t,Math.min(i,o))}function qt(t,e,n){var i=Math.min(t,e);return i*=Math.log(1+50*Math.max(0,t/e-1))/50+1,n&&(i=Math.max(i,n),i/=Math.log(1+50*Math.max(0,n/t-1))/50+1),dt(i,n/2,2*e)}function $t(t,e,n,i){return function(o,r,a,s){if(void 0!==o){var u=i?Ht(t,i,a):t;return(void 0===n||n)&&s?qt(o,u,e):dt(o,e,u)}}}function Jt(t){return void 0!==t?0:void 0}function Qt(t){return void 0!==t?t:void 0}var te="center",ee="resolution",ne="rotation";function ie(t,e){for(var n=!0,i=t.length-1;i>=0;--i)if(t[i]!=e[i]){n=!1;break}return n}function oe(t,e){var n=Math.cos(e),i=Math.sin(e),o=t[0]*n-t[1]*i,r=t[1]*n+t[0]*i;return t[0]=o,t[1]=r,t}function re(t){return Math.pow(t,3)}function ae(t){return 1-re(1-t)}function se(t){return 3*t*t-2*t*t*t}function ue(t){return t}var le="Point",he="LineString",ce="LinearRing",pe="Polygon",fe="MultiPoint",de="MultiLineString",_e="MultiPolygon",ge="GeometryCollection",ve="Circle",ye={XY:"XY",XYZ:"XYZ",XYM:"XYM",XYZM:"XYZM"};function me(t,e,n,i,o,r){for(var a=r||[],s=0,u=e;u<n;u+=i){var l=t[u],h=t[u+1];a[s++]=o[0]*l+o[2]*h+o[4],a[s++]=o[1]*l+o[3]*h+o[5]}return r&&a.length!=s&&(a.length=s),a}var Ee=6371008.8;function Te(t,e,n){var i=n||Ee,o=yt(t[1]),r=yt(e[1]),a=(r-o)/2,s=yt(e[0]-t[0])/2,u=Math.sin(a)*Math.sin(a)+Math.sin(s)*Math.sin(s)*Math.cos(o)*Math.cos(r);return 2*i*Math.atan2(Math.sqrt(u),Math.sqrt(1-u))}var we={DEGREES:"degrees",FEET:"ft",METERS:"m",PIXELS:"pixels",TILE_PIXELS:"tile-pixels",USFEET:"us-ft"},xe={};xe[we.DEGREES]=2*Math.PI*6370997/360,xe[we.FEET]=.3048,xe[we.METERS]=1,xe[we.USFEET]=1200/3937;var Ce=we,be=function(){function t(t){this.code_=t.code,this.units_=t.units,this.extent_=void 0!==t.extent?t.extent:null,this.worldExtent_=void 0!==t.worldExtent?t.worldExtent:null,this.axisOrientation_=void 0!==t.axisOrientation?t.axisOrientation:"enu",this.global_=void 0!==t.global&&t.global,this.canWrapX_=!(!this.global_||!this.extent_),this.getPointResolutionFunc_=t.getPointResolution,this.defaultTileGrid_=null,this.metersPerUnit_=t.metersPerUnit}return t.prototype.canWrapX=function(){return this.canWrapX_},t.prototype.getCode=function(){return this.code_},t.prototype.getExtent=function(){return this.extent_},t.prototype.getUnits=function(){return this.units_},t.prototype.getMetersPerUnit=function(){return this.metersPerUnit_||xe[this.units_]},t.prototype.getWorldExtent=function(){return this.worldExtent_},t.prototype.getAxisOrientation=function(){return this.axisOrientation_},t.prototype.isGlobal=function(){return this.global_},t.prototype.setGlobal=function(t){this.global_=t,this.canWrapX_=!(!t||!this.extent_)},t.prototype.getDefaultTileGrid=function(){return this.defaultTileGrid_},t.prototype.setDefaultTileGrid=function(t){this.defaultTileGrid_=t},t.prototype.setExtent=function(t){this.extent_=t,this.canWrapX_=!(!this.global_||!t)},t.prototype.setWorldExtent=function(t){this.worldExtent_=t},t.prototype.setGetPointResolution=function(t){this.getPointResolutionFunc_=t},t.prototype.getPointResolutionFunc=function(){return this.getPointResolutionFunc_},t}(),Oe=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Se=6378137,Pe=Math.PI*Se,Re=[-Pe,-Pe,Pe,Pe],Ie=[-180,-85,180,85],Me=function(t){function e(e){return t.call(this,{code:e,units:Ce.METERS,extent:Re,global:!0,worldExtent:Ie,getPointResolution:function(t,e){return t/_t(e[1]/Se)}})||this}return Oe(e,t),e}(be),Le=[new Me("EPSG:3857"),new Me("EPSG:102100"),new Me("EPSG:102113"),new Me("EPSG:900913"),new Me("urn:ogc:def:crs:EPSG:6.18:3:3857"),new Me("urn:ogc:def:crs:EPSG::3857"),new Me("http://www.opengis.net/gml/srs/epsg.xml#3857")];var Ae=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),De=[-180,-90,180,90],Fe=6378137*Math.PI/180,je=function(t){function e(e,n){return t.call(this,{code:e,units:Ce.DEGREES,extent:De,axisOrientation:n,global:!0,metersPerUnit:Fe,worldExtent:De})||this}return Ae(e,t),e}(be),Ne=[new je("CRS:84"),new je("EPSG:4326","neu"),new je("urn:ogc:def:crs:EPSG::4326","neu"),new je("urn:ogc:def:crs:EPSG:6.6:4326","neu"),new je("urn:ogc:def:crs:OGC:1.3:CRS84"),new je("urn:ogc:def:crs:OGC:2:84"),new je("http://www.opengis.net/gml/srs/epsg.xml#4326","neu"),new je("urn:x-ogc:def:crs:EPSG:4326","neu")],ke={};function Ge(t,e,n){var i=t.getCode(),o=e.getCode();i in ke||(ke[i]={}),ke[i][o]=n}var ze={};function Ke(t,e,n){var i;if(void 0!==e){for(var o=0,r=t.length;o<r;++o)e[o]=t[o];i=e}else i=t.slice();return i}function Xe(t,e,n){if(void 0!==e&&t!==e){for(var i=0,o=t.length;i<o;++i)e[i]=t[i];t=e}return t}function Ye(t){!function(t,e){ze[t]=e}(t.getCode(),t),Ge(t,t,Ke)}function Ze(t){return"string"==typeof t?ze[t]||null:t||null}function Ue(t,e,n,i){var o,r=(t=Ze(t)).getPointResolutionFunc();if(r)o=r(e,n),i&&i!==t.getUnits()&&(a=t.getMetersPerUnit())&&(o=o*a/xe[i]);else if(t.getUnits()==Ce.DEGREES&&!i||i==Ce.DEGREES)o=e;else{var a,s=He(t,Ze("EPSG:4326")),u=[n[0]-e/2,n[1],n[0]+e/2,n[1],n[0],n[1]-e/2,n[0],n[1]+e/2];o=(Te((u=s(u,u,2)).slice(0,2),u.slice(2,4))+Te(u.slice(4,6),u.slice(6,8)))/2,void 0!==(a=i?xe[i]:t.getMetersPerUnit())&&(o/=a)}return o}function We(t){!function(t){t.forEach(Ye)}(t),t.forEach((function(e){t.forEach((function(t){e!==t&&Ge(e,t,Ke)}))}))}function Ve(t,e){return t?"string"==typeof t?Ze(t):t:Ze(e)}function Be(t,e){if(t===e)return!0;var n=t.getUnits()===e.getUnits();return t.getCode()===e.getCode()?n:He(t,e)===Ke&&n}function He(t,e){var n=function(t,e){var n;return t in ke&&e in ke[t]&&(n=ke[t][e]),n}(t.getCode(),e.getCode());return n||(n=Xe),n}function qe(t,e){return He(Ze(t),Ze(e))}function $e(t,e,n){return qe(e,n)(t,void 0,t.length)}function Je(t,e,n){return function(t,e,n){var i=[t[0],t[1],t[0],t[3],t[2],t[1],t[2],t[3]];return e(i,i,2),function(t,e,n){return It(Math.min.apply(null,t),Math.min.apply(null,e),Math.max.apply(null,t),Math.max.apply(null,e),n)}([i[0],i[2],i[4],i[6]],[i[1],i[3],i[5],i[7]],n)}(t,qe(e,n))}var Qe,tn,en,nn=null;function on(t,e){return nn?$e(t,e,nn):t}function rn(t,e){return nn?$e(t,nn,e):t}function an(t,e){return nn?Je(t,nn,e):t}function sn(t,e){var n=e[0],i=e[1];return e[0]=t[0]*n+t[2]*i+t[4],e[1]=t[1]*n+t[3]*i+t[5],e}function un(t,e,n,i,o,r,a,s){var u=Math.sin(r),l=Math.cos(r);return t[0]=i*l,t[1]=o*u,t[2]=-i*u,t[3]=o*l,t[4]=a*i*l-s*i*u+e,t[5]=a*o*u+s*o*l+n,t}function ln(t,e){var n,i=(n=e)[0]*n[3]-n[1]*n[2];ut(0!==i,32);var o=e[0],r=e[1],a=e[2],s=e[3],u=e[4],l=e[5];return t[0]=s/i,t[1]=-r/i,t[2]=-a/i,t[3]=o/i,t[4]=(a*l-s*u)/i,t[5]=-(o*l-r*u)/i,t}We(Le),We(Ne),Qe=Le,tn=function(t,e,n){var i=t.length,o=n>1?n:2,r=e;void 0===r&&(r=o>2?t.slice():new Array(i));for(var a=Pe,s=0;s<i;s+=o){r[s]=a*t[s]/180;var u=Se*Math.log(Math.tan(Math.PI*(+t[s+1]+90)/360));u>a?u=a:u<-a&&(u=-a),r[s+1]=u}return r},en=function(t,e,n){var i=t.length,o=n>1?n:2,r=e;void 0===r&&(r=o>2?t.slice():new Array(i));for(var a=0;a<i;a+=o)r[a]=180*t[a]/Pe,r[a+1]=360*Math.atan(Math.exp(t[a+1]/Se))/Math.PI-90;return r},Ne.forEach((function(t){Qe.forEach((function(e){Ge(t,e,tn),Ge(e,t,en)}))})),new Array(6);var hn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),cn=[1,0,0,1,0,0],pn=function(t){function e(){var e,n,i,o,r,a=t.call(this)||this;return a.extent_=[1/0,1/0,-1/0,-1/0],a.extentRevision_=-1,a.simplifiedGeometryMaxMinSquaredTolerance=0,a.simplifiedGeometryRevision=0,a.simplifyTransformedInternal=(e=function(t,e,n){if(!n)return this.getSimplifiedGeometry(e);var i=this.clone();return i.applyTransform(n),i.getSimplifiedGeometry(e)},r=!1,function(){var t=Array.prototype.slice.call(arguments);return r&&this===o&&T(t,i)||(r=!0,o=this,i=t,n=e.apply(this,arguments)),n}),a}return hn(e,t),e.prototype.simplifyTransformed=function(t,e){return this.simplifyTransformedInternal(this.getRevision(),t,e)},e.prototype.clone=function(){return i()},e.prototype.closestPointXY=function(t,e,n,o){return i()},e.prototype.containsXY=function(t,e){var n=this.getClosestPoint([t,e]);return n[0]===t&&n[1]===e},e.prototype.getClosestPoint=function(t,e){var n=e||[NaN,NaN];return this.closestPointXY(t[0],t[1],n,1/0),n},e.prototype.intersectsCoordinate=function(t){return this.containsXY(t[0],t[1])},e.prototype.computeExtent=function(t){return i()},e.prototype.getExtent=function(t){return this.extentRevision_!=this.getRevision()&&(this.extent_=this.computeExtent(this.extent_),this.extentRevision_=this.getRevision()),function(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t}(this.extent_,t)},e.prototype.rotate=function(t,e){i()},e.prototype.scale=function(t,e,n){i()},e.prototype.simplify=function(t){return this.getSimplifiedGeometry(t*t)},e.prototype.getSimplifiedGeometry=function(t){return i()},e.prototype.getType=function(){return i()},e.prototype.applyTransform=function(t){i()},e.prototype.intersectsExtent=function(t){return i()},e.prototype.translate=function(t,e){i()},e.prototype.transform=function(t,e){var n=Ze(t),i=n.getUnits()==Ce.TILE_PIXELS?function(t,i,o){var r=n.getExtent(),a=n.getWorldExtent(),s=Xt(a)/Xt(r);return un(cn,a[0],a[3],s,-s,0,0,0),me(t,0,t.length,o,cn,i),qe(n,e)(t,i,o)}:qe(n,e);return this.applyTransform(i),this},e}(j),fn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function dn(t){var e;return t==ye.XY?e=2:t==ye.XYZ||t==ye.XYM?e=3:t==ye.XYZM&&(e=4),e}var _n=function(t){function e(){var e=t.call(this)||this;return e.layout=ye.XY,e.stride=2,e.flatCoordinates=null,e}return fn(e,t),e.prototype.computeExtent=function(t){return e=this.flatCoordinates,0,n=this.flatCoordinates.length,i=this.stride,Dt(Mt(t),e,0,n,i);var e,n,i},e.prototype.getCoordinates=function(){return i()},e.prototype.getFirstCoordinate=function(){return this.flatCoordinates.slice(0,this.stride)},e.prototype.getFlatCoordinates=function(){return this.flatCoordinates},e.prototype.getLastCoordinate=function(){return this.flatCoordinates.slice(this.flatCoordinates.length-this.stride)},e.prototype.getLayout=function(){return this.layout},e.prototype.getSimplifiedGeometry=function(t){if(this.simplifiedGeometryRevision!==this.getRevision()&&(this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),t<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&t<=this.simplifiedGeometryMaxMinSquaredTolerance)return this;var e=this.getSimplifiedGeometryInternal(t);return e.getFlatCoordinates().length<this.flatCoordinates.length?e:(this.simplifiedGeometryMaxMinSquaredTolerance=t,this)},e.prototype.getSimplifiedGeometryInternal=function(t){return this},e.prototype.getStride=function(){return this.stride},e.prototype.setFlatCoordinates=function(t,e){this.stride=dn(t),this.layout=t,this.flatCoordinates=e},e.prototype.setCoordinates=function(t,e){i()},e.prototype.setLayout=function(t,e,n){var i;if(t)i=dn(t);else{for(var o=0;o<n;++o){if(0===e.length)return this.layout=ye.XY,void(this.stride=2);e=e[0]}t=function(t){var e;return 2==t?e=ye.XY:3==t?e=ye.XYZ:4==t&&(e=ye.XYZM),e}(i=e.length)}this.layout=t,this.stride=i},e.prototype.applyTransform=function(t){this.flatCoordinates&&(t(this.flatCoordinates,this.flatCoordinates,this.stride),this.changed())},e.prototype.rotate=function(t,e){var n=this.getFlatCoordinates();if(n){var i=this.getStride();!function(t,e,n,i,o,r,a){for(var s=a||[],u=Math.cos(o),l=Math.sin(o),h=r[0],c=r[1],p=0,f=0;f<n;f+=i){var d=t[f]-h,_=t[f+1]-c;s[p++]=h+d*u-_*l,s[p++]=c+d*l+_*u;for(var g=f+2;g<f+i;++g)s[p++]=t[g]}a&&s.length!=p&&(s.length=p)}(n,0,n.length,i,t,e,n),this.changed()}},e.prototype.scale=function(t,e,n){var i=e;void 0===i&&(i=t);var o=n;o||(o=Gt(this.getExtent()));var r=this.getFlatCoordinates();if(r){var a=this.getStride();!function(t,e,n,i,o,r,a,s){for(var u=s||[],l=a[0],h=a[1],c=0,p=0;p<n;p+=i){var f=t[p]-l,d=t[p+1]-h;u[c++]=l+o*f,u[c++]=h+r*d;for(var _=p+2;_<p+i;++_)u[c++]=t[_]}s&&u.length!=c&&(u.length=c)}(r,0,r.length,a,t,i,o,r),this.changed()}},e.prototype.translate=function(t,e){var n=this.getFlatCoordinates();if(n){var i=this.getStride();!function(t,e,n,i,o,r,a){for(var s=a||[],u=0,l=0;l<n;l+=i){s[u++]=t[l]+o,s[u++]=t[l+1]+r;for(var h=l+2;h<l+i;++h)s[u++]=t[h]}a&&s.length!=u&&(s.length=u)}(n,0,n.length,i,t,e,n),this.changed()}},e}(pn);function gn(t,e,n,i){for(var o=0,r=t[n-i],a=t[n-i+1];e<n;e+=i){var s=t[e],u=t[e+1];o+=a*s-r*u,r=s,a=u}return o/2}function vn(t,e,n,i,o,r,a){var s,u=t[e],l=t[e+1],h=t[n]-u,c=t[n+1]-l;if(0===h&&0===c)s=e;else{var p=((o-u)*h+(r-l)*c)/(h*h+c*c);if(p>1)s=n;else{if(p>0){for(var f=0;f<i;++f)a[f]=Et(t[e+f],t[n+f],p);return void(a.length=i)}s=e}}for(f=0;f<i;++f)a[f]=t[s+f];a.length=i}function yn(t,e,n,i,o){var r=t[e],a=t[e+1];for(e+=i;e<n;e+=i){var s=t[e],u=t[e+1],l=vt(r,a,s,u);l>o&&(o=l),r=s,a=u}return o}function mn(t,e,n,i,o,r,a,s,u,l,h){if(e==n)return l;var c,p;if(0===o){if((p=vt(a,s,t[e],t[e+1]))<l){for(c=0;c<i;++c)u[c]=t[e+c];return u.length=i,p}return l}for(var f=h||[NaN,NaN],d=e+i;d<n;)if(vn(t,d-i,d,i,a,s,f),(p=vt(a,s,f[0],f[1]))<l){for(l=p,c=0;c<i;++c)u[c]=f[c];u.length=i,d+=i}else d+=i*Math.max((Math.sqrt(p)-Math.sqrt(l))/o|0,1);if(r&&(vn(t,n-i,e,i,a,s,f),(p=vt(a,s,f[0],f[1]))<l)){for(l=p,c=0;c<i;++c)u[c]=f[c];u.length=i}return l}function En(t,e,n,i){for(var o=0,r=n.length;o<r;++o)for(var a=n[o],s=0;s<i;++s)t[e++]=a[s];return e}function Tn(t,e,n,i,o){for(var r=void 0!==o?o:[],a=0,s=e;s<n;s+=i)r[a++]=t.slice(s,s+i);return r.length=a,r}function wn(t,e){return e*Math.round(t/e)}function xn(t,e,n,i,o,r,a){if(e==n)return a;var s,u,l=wn(t[e],o),h=wn(t[e+1],o);e+=i,r[a++]=l,r[a++]=h;do{if(s=wn(t[e],o),u=wn(t[e+1],o),(e+=i)==n)return r[a++]=s,r[a++]=u,a}while(s==l&&u==h);for(;e<n;){var c=wn(t[e],o),p=wn(t[e+1],o);if(e+=i,c!=s||p!=u){var f=s-l,d=u-h,_=c-l,g=p-h;f*g==d*_&&(f<0&&_<f||f==_||f>0&&_>f)&&(d<0&&g<d||d==g||d>0&&g>d)?(s=c,u=p):(r[a++]=s,r[a++]=u,l=s,h=u,s=c,u=p)}}return r[a++]=s,r[a++]=u,a}var Cn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),bn=function(t){function e(e,n){var i=t.call(this)||this;return i.maxDelta_=-1,i.maxDeltaRevision_=-1,void 0===n||Array.isArray(e[0])?i.setCoordinates(e,n):i.setFlatCoordinates(n,e),i}return Cn(e,t),e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,n,i){return i<Ot(this.getExtent(),t,e)?i:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(yn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),mn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,n,i))},e.prototype.getArea=function(){return gn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getCoordinates=function(){return Tn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getSimplifiedGeometryInternal=function(t){var n=[];return n.length=function(t,e,n,i,o,r,a){var s=(n-e)/i;if(s<3){for(;e<n;e+=i)r[a++]=t[e],r[a++]=t[e+1];return a}var u=new Array(s);u[0]=1,u[s-1]=1;for(var l=[e,n-i],h=0;l.length>0;){for(var c=l.pop(),p=l.pop(),f=0,d=t[p],_=t[p+1],g=t[c],v=t[c+1],y=p+i;y<c;y+=i){var m=gt(t[y],t[y+1],d,_,g,v);m>f&&(h=y,f=m)}f>o&&(u[(h-e)/i]=1,p+i<h&&l.push(p,h),h+i<c&&l.push(h,c))}for(y=0;y<s;++y)u[y]&&(r[a++]=t[e+y*i],r[a++]=t[e+y*i+1]);return a}(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,n,0),new e(n,ye.XY)},e.prototype.getType=function(){return ce},e.prototype.intersectsExtent=function(t){return!1},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=En(this.flatCoordinates,0,t,this.stride),this.changed()},e}(_n),On=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Sn=function(t){function e(e,n){var i=t.call(this)||this;return i.setCoordinates(e,n),i}return On(e,t),e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,n,i){var o=this.flatCoordinates,r=vt(t,e,o[0],o[1]);if(r<i){for(var a=this.stride,s=0;s<a;++s)n[s]=o[s];return n.length=a,r}return i},e.prototype.getCoordinates=function(){return this.flatCoordinates?this.flatCoordinates.slice():[]},e.prototype.computeExtent=function(t){return n=t,It(i=(e=this.flatCoordinates)[0],o=e[1],i,o,n);var e,n,i,o},e.prototype.getType=function(){return le},e.prototype.intersectsExtent=function(t){return Pt(t,this.flatCoordinates[0],this.flatCoordinates[1])},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,0),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=function(t,e,n,i){for(var o=0,r=n.length;o<r;++o)t[e++]=n[o];return e}(this.flatCoordinates,0,t,this.stride),this.changed()},e}(_n);function Pn(t,e,n,i,o){return!function(t,e){var n;return(n=e(Nt(t)))?n:(n=e(kt(t)))?n:(n=e(Ut(t)))?n:(n=e(Zt(t)))||!1}(o,(function(o){return!Rn(t,e,n,i,o[0],o[1])}))}function Rn(t,e,n,i,o,r){for(var a=0,s=t[n-i],u=t[n-i+1];e<n;e+=i){var l=t[e],h=t[e+1];u<=r?h>r&&(l-s)*(r-u)-(o-s)*(h-u)>0&&a++:h<=r&&(l-s)*(r-u)-(o-s)*(h-u)<0&&a--,s=l,u=h}return 0!==a}function In(t,e,n,i,o,r){if(0===n.length)return!1;if(!Rn(t,e,n[0],i,o,r))return!1;for(var a=1,s=n.length;a<s;++a)if(Rn(t,n[a-1],n[a],i,o,r))return!1;return!0}function Mn(t,e,n,i,o){var r,a,s=Dt([1/0,1/0,-1/0,-1/0],t,e,n,i);return!!Vt(o,s)&&(a=s,(r=o)[0]<=a[0]&&a[2]<=r[2]&&r[1]<=a[1]&&a[3]<=r[3]||s[0]>=o[0]&&s[2]<=o[2]||s[1]>=o[1]&&s[3]<=o[3]||function(t,e,n,i,o){for(var r,a=[t[e],t[e+1]],s=[];e+i<n;e+=i){if(s[0]=t[e+i],s[1]=t[e+i+1],r=o(a,s))return r;a[0]=s[0],a[1]=s[1]}return!1}(t,e,n,i,(function(t,e){return function(t,e,n){var i=!1,o=Rt(t,e),r=Rt(t,n);if(o===Ct.INTERSECTING||r===Ct.INTERSECTING)i=!0;else{var a=t[0],s=t[1],u=t[2],l=t[3],h=e[0],c=e[1],p=n[0],f=n[1],d=(f-c)/(p-h),_=void 0,g=void 0;r&Ct.ABOVE&&!(o&Ct.ABOVE)&&(i=(_=p-(f-l)/d)>=a&&_<=u),i||!(r&Ct.RIGHT)||o&Ct.RIGHT||(i=(g=f-(p-u)*d)>=s&&g<=l),i||!(r&Ct.BELOW)||o&Ct.BELOW||(i=(_=p-(f-s)/d)>=a&&_<=u),i||!(r&Ct.LEFT)||o&Ct.LEFT||(i=(g=f-(p-a)*d)>=s&&g<=l)}return i}(o,t,e)})))}function Ln(t,e,n,i){for(;e<n-i;){for(var o=0;o<i;++o){var r=t[e+o];t[e+o]=t[n-i+o],t[n-i+o]=r}e+=i,n-=i}}function An(t,e,n,i){for(var o=0,r=t[n-i],a=t[n-i+1];e<n;e+=i){var s=t[e],u=t[e+1];o+=(s-r)*(u+a),r=s,a=u}return o>0}function Dn(t,e,n,i,o){for(var r=void 0!==o&&o,a=0,s=n.length;a<s;++a){var u=n[a],l=An(t,e,u,i);(0===a?r&&l||!r&&!l:r&&!l||!r&&l)&&Ln(t,e,u,i),e=u}return e}var Fn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),jn=function(t){function e(e,n,i){var o=t.call(this)||this;return o.ends_=[],o.flatInteriorPointRevision_=-1,o.flatInteriorPoint_=null,o.maxDelta_=-1,o.maxDeltaRevision_=-1,o.orientedRevision_=-1,o.orientedFlatCoordinates_=null,void 0!==n&&i?(o.setFlatCoordinates(n,e),o.ends_=i):o.setCoordinates(e,n),o}return Fn(e,t),e.prototype.appendLinearRing=function(t){this.flatCoordinates?function(t,e){for(var n=Array.isArray(e)?e:[e],i=n.length,o=0;o<i;o++)t[t.length]=n[o]}(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()},e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout,this.ends_.slice())},e.prototype.closestPointXY=function(t,e,n,i){return i<Ot(this.getExtent(),t,e)?i:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(function(t,e,n,i,o){for(var r=0,a=n.length;r<a;++r){var s=n[r];o=yn(t,e,s,i,o),e=s}return o}(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),function(t,e,n,i,o,r,a,s,u,l,h){for(var c=h||[NaN,NaN],p=0,f=n.length;p<f;++p){var d=n[p];l=mn(t,e,d,i,o,r,a,s,u,l,c),e=d}return l}(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,n,i))},e.prototype.containsXY=function(t,e){return In(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)},e.prototype.getArea=function(){return function(t,e,n,i){for(var o=0,r=0,a=n.length;r<a;++r){var s=n[r];o+=gn(t,e,s,i),e=s}return o}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)},e.prototype.getCoordinates=function(t){var e;return void 0!==t?Dn(e=this.getOrientedFlatCoordinates().slice(),0,this.ends_,this.stride,t):e=this.flatCoordinates,function(t,e,n,i,o){for(var r=void 0!==o?o:[],a=0,s=0,u=n.length;s<u;++s){var l=n[s];r[a++]=Tn(t,e,l,i,r[a]),e=l}return r.length=a,r}(e,0,this.ends_,this.stride)},e.prototype.getEnds=function(){return this.ends_},e.prototype.getFlatInteriorPoint=function(){if(this.flatInteriorPointRevision_!=this.getRevision()){var t=Gt(this.getExtent());this.flatInteriorPoint_=function(t,e,n,i,o,r,a){for(var s,u,l,h,c,p,f,d=o[r+1],_=[],g=0,v=n.length;g<v;++g){var y=n[g];for(h=t[y-i],p=t[y-i+1],s=e;s<y;s+=i)c=t[s],f=t[s+1],(d<=p&&f<=d||p<=d&&d<=f)&&(l=(d-p)/(f-p)*(c-h)+h,_.push(l)),h=c,p=f}var E=NaN,T=-1/0;for(_.sort(m),h=_[0],s=1,u=_.length;s<u;++s){c=_[s];var w=Math.abs(c-h);w>T&&In(t,e,n,i,l=(h+c)/2,d)&&(E=l,T=w),h=c}return isNaN(E)&&(E=o[r]),a?(a.push(E,d,T),a):[E,d,T]}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_},e.prototype.getInteriorPoint=function(){return new Sn(this.getFlatInteriorPoint(),ye.XYM)},e.prototype.getLinearRingCount=function(){return this.ends_.length},e.prototype.getLinearRing=function(t){return t<0||this.ends_.length<=t?null:new bn(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)},e.prototype.getLinearRings=function(){for(var t=this.layout,e=this.flatCoordinates,n=this.ends_,i=[],o=0,r=0,a=n.length;r<a;++r){var s=n[r],u=new bn(e.slice(o,s),t);i.push(u),o=s}return i},e.prototype.getOrientedFlatCoordinates=function(){if(this.orientedRevision_!=this.getRevision()){var t=this.flatCoordinates;!function(t,e,n,i,o){for(var r=void 0!==o&&o,a=0,s=n.length;a<s;++a){var u=n[a],l=An(t,e,u,i);if(0===a){if(r&&l||!r&&!l)return!1}else if(r&&!l||!r&&l)return!1;e=u}return!0}(t,0,this.ends_,this.stride)?(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=Dn(this.orientedFlatCoordinates_,0,this.ends_,this.stride)):this.orientedFlatCoordinates_=t,this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_},e.prototype.getSimplifiedGeometryInternal=function(t){var n=[],i=[];return n.length=function(t,e,n,i,o,r,a,s){for(var u=0,l=n.length;u<l;++u){var h=n[u];a=xn(t,e,h,i,o,r,a),s.push(a),e=h}return a}(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),n,0,i),new e(n,ye.XY,i)},e.prototype.getType=function(){return pe},e.prototype.intersectsExtent=function(t){return function(t,e,n,i,o){if(!function(t,e,n,i,o){return!!(Mn(t,e,n,i,o)||Rn(t,e,n,i,o[0],o[1])||Rn(t,e,n,i,o[0],o[3])||Rn(t,e,n,i,o[2],o[1])||Rn(t,e,n,i,o[2],o[3]))}(t,e,n[0],i,o))return!1;if(1===n.length)return!0;for(var r=1,a=n.length;r<a;++r)if(Pn(t,n[r-1],n[r],i,o)&&!Mn(t,n[r-1],n[r],i,o))return!1;return!0}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);var n=function(t,e,n,i,o){for(var r=o||[],a=0,s=0,u=n.length;s<u;++s){var l=En(t,e,n[s],i);r[a++]=l,e=l}return r.length=a,r}(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===n.length?0:n[n.length-1],this.changed()},e}(_n),Nn=jn;function kn(t){var e=t[0],n=t[1],i=t[2],o=t[3],r=[e,n,e,o,i,o,i,n,e,n];return new jn(r,ye.XY,[r.length])}var Gn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function zn(t,e){setTimeout((function(){t(e)}),0)}function Kn(t){return!(t.sourceCenter&&t.targetCenter&&!ie(t.sourceCenter,t.targetCenter))&&t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation}var Xn=function(t){function e(e){var n=t.call(this)||this,i=p({},e);return n.hints_=[0,0],n.animations_=[],n.updateAnimationKey_,n.projection_=Ve(i.projection,"EPSG:3857"),n.targetCenter_=null,n.targetResolution_,n.targetRotation_,i.center&&(i.center=rn(i.center,n.projection_)),i.extent&&(i.extent=an(i.extent,n.projection_)),n.applyOptions_(i),n}return Gn(e,t),e.prototype.applyOptions_=function(t){var e=function(t){var e,n,i,o=void 0!==t.minZoom?t.minZoom:0,r=void 0!==t.maxZoom?t.maxZoom:28,a=void 0!==t.zoomFactor?t.zoomFactor:2,s=void 0!==t.multiWorld&&t.multiWorld,u=void 0===t.smoothResolutionConstraint||t.smoothResolutionConstraint,l=Ve(t.projection,"EPSG:3857"),h=l.getExtent(),c=t.constrainOnlyCenter,p=t.extent;if(s||p||!l.isGlobal()||(c=!1,p=h),void 0!==t.resolutions){var f=t.resolutions;n=f[o],i=void 0!==f[r]?f[r]:f[f.length-1],e=t.constrainResolution?function(t,e,n){return function(i,o,r,a){if(void 0!==i){var s=t[0],u=t[t.length-1],l=n?Ht(s,n,r):s;if(a)return void 0===e||e?qt(i,l,u):dt(i,u,l);var h=Math.min(l,i),c=Math.floor(E(t,h,o));return t[c]>l&&c<t.length-1?t[c+1]:t[c]}}}(f,u,!c&&p):$t(n,i,u,!c&&p)}else{var d=(h?Math.max(Wt(h),Xt(h)):360*xe[Ce.DEGREES]/l.getMetersPerUnit())/ft/Math.pow(2,0),_=d/Math.pow(2,28);void 0!==(n=t.maxResolution)?o=0:n=d/Math.pow(a,o),void 0===(i=t.minResolution)&&(i=void 0!==t.maxZoom?void 0!==t.maxResolution?n/Math.pow(a,r):d/Math.pow(a,r):_),r=o+Math.floor(Math.log(n/i)/Math.log(a)),i=n/Math.pow(a,r-o),e=t.constrainResolution?function(t,e,n,i,o){return function(r,a,s,u){if(void 0!==r){var l=o?Ht(e,o,s):e,h=void 0!==n?n:0;if(u)return void 0===i||i?qt(r,l,h):dt(r,h,l);var c=Math.ceil(Math.log(e/l)/Math.log(t)-1e-9),p=-a*(.5-1e-9)+.5,f=Math.min(l,r),d=Math.floor(Math.log(e/f)/Math.log(t)+p),_=Math.max(c,d);return dt(e/Math.pow(t,_),h,l)}}}(a,n,i,u,!c&&p):$t(n,i,u,!c&&p)}return{constraint:e,maxResolution:n,minResolution:i,minZoom:o,zoomFactor:a}}(t);this.maxResolution_=e.maxResolution,this.minResolution_=e.minResolution,this.zoomFactor_=e.zoomFactor,this.resolutions_=t.resolutions,this.minZoom_=e.minZoom;var n=function(t){if(void 0!==t.extent){var e=void 0===t.smoothExtentConstraint||t.smoothExtentConstraint;return Tt(t.extent,t.constrainOnlyCenter,e)}var n=Ve(t.projection,"EPSG:3857");if(!0!==t.multiWorld&&n.isGlobal()){var i=n.getExtent().slice();return i[0]=-1/0,i[2]=1/0,Tt(i,!1,!1)}return wt}(t),i=e.constraint,o=function(t){if(void 0===t.enableRotation||t.enableRotation){var e=t.constrainRotation;return void 0===e||!0===e?(o=yt(5),function(t,e){return e?t:void 0!==t?Math.abs(t)<=o?0:t:void 0}):!1===e?Qt:"number"==typeof e?(n=e,i=2*Math.PI/n,function(t,e){return e?t:void 0!==t?t=Math.floor(t/i+.5)*i:void 0}):Qt}return Jt;var n,i,o}(t);this.constraints_={center:n,resolution:i,rotation:o},this.setRotation(void 0!==t.rotation?t.rotation:0),this.setCenterInternal(void 0!==t.center?t.center:null),void 0!==t.resolution?this.setResolution(t.resolution):void 0!==t.zoom&&this.setZoom(t.zoom),this.resolveConstraints(0),this.setProperties({}),this.options_=t},e.prototype.getUpdatedOptions_=function(t){var e=p({},this.options_);return void 0!==e.resolution?e.resolution=this.getResolution():e.zoom=this.getZoom(),e.center=this.getCenterInternal(),e.rotation=this.getRotation(),p({},e,t)},e.prototype.animate=function(t){this.isDef()&&!this.getAnimating()&&this.resolveConstraints(0);for(var e=new Array(arguments.length),n=0;n<e.length;++n){var i=arguments[n];i.center&&((i=p({},i)).center=rn(i.center,this.getProjection())),i.anchor&&((i=p({},i)).anchor=rn(i.anchor,this.getProjection())),e[n]=i}this.animateInternal.apply(this,e)},e.prototype.animateInternal=function(t){var e,n=arguments.length;if(n>1&&"function"==typeof arguments[n-1]&&(e=arguments[n-1],--n),!this.isDef()){var i=arguments[n-1];return i.center&&this.setCenterInternal(i.center),void 0!==i.zoom&&this.setZoom(i.zoom),void 0!==i.rotation&&this.setRotation(i.rotation),void(e&&zn(e,!0))}for(var o=Date.now(),r=this.targetCenter_.slice(),a=this.targetResolution_,s=this.targetRotation_,u=[],l=0;l<n;++l){var h=arguments[l],c={start:o,complete:!1,anchor:h.anchor,duration:void 0!==h.duration?h.duration:1e3,easing:h.easing||se,callback:e};if(h.center&&(c.sourceCenter=r,c.targetCenter=h.center.slice(),r=c.targetCenter),void 0!==h.zoom?(c.sourceResolution=a,c.targetResolution=this.getResolutionForZoom(h.zoom),a=c.targetResolution):h.resolution&&(c.sourceResolution=a,c.targetResolution=h.resolution,a=c.targetResolution),void 0!==h.rotation){c.sourceRotation=s;var p=mt(h.rotation-s+Math.PI,2*Math.PI)-Math.PI;c.targetRotation=s+p,s=c.targetRotation}Kn(c)?c.complete=!0:o+=c.duration,u.push(c)}this.animations_.push(u),this.setHint(0,1),this.updateAnimations_()},e.prototype.getAnimating=function(){return this.hints_[0]>0},e.prototype.getInteracting=function(){return this.hints_[1]>0},e.prototype.cancelAnimations=function(){this.setHint(0,-this.hints_[0]);for(var t=0,e=this.animations_.length;t<e;++t){var n=this.animations_[t];n[0].callback&&zn(n[0].callback,!1)}this.animations_.length=0},e.prototype.updateAnimations_=function(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),this.getAnimating()){for(var t=Date.now(),e=!1,n=this.animations_.length-1;n>=0;--n){for(var i=this.animations_[n],o=!0,r=0,a=i.length;r<a;++r){var s=i[r];if(!s.complete){var u=t-s.start,l=s.duration>0?u/s.duration:1;l>=1?(s.complete=!0,l=1):o=!1;var h=s.easing(l);if(s.sourceCenter){var c=s.sourceCenter[0],p=s.sourceCenter[1],f=c+h*(s.targetCenter[0]-c),d=p+h*(s.targetCenter[1]-p);this.targetCenter_=[f,d]}if(s.sourceResolution&&s.targetResolution){var _=1===h?s.targetResolution:s.sourceResolution+h*(s.targetResolution-s.sourceResolution);if(s.anchor){var g=this.getSizeFromViewport_(this.getRotation()),v=this.constraints_.resolution(_,0,g,!0);this.targetCenter_=this.calculateCenterZoom(v,s.anchor)}this.targetResolution_=_,this.applyTargetState_(!0)}if(void 0!==s.sourceRotation&&void 0!==s.targetRotation){var y=1===h?mt(s.targetRotation+Math.PI,2*Math.PI)-Math.PI:s.sourceRotation+h*(s.targetRotation-s.sourceRotation);if(s.anchor){var m=this.constraints_.rotation(y,!0);this.targetCenter_=this.calculateCenterRotate(m,s.anchor)}this.targetRotation_=y}if(this.applyTargetState_(!0),e=!0,!s.complete)break}}if(o){this.animations_[n]=null,this.setHint(0,-1);var E=i[0].callback;E&&zn(E,!0)}}this.animations_=this.animations_.filter(Boolean),e&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_.bind(this)))}},e.prototype.calculateCenterRotate=function(t,e){var n,i,o,r=this.getCenterInternal();return void 0!==r&&(oe(n=[r[0]-e[0],r[1]-e[1]],t-this.getRotation()),o=e,(i=n)[0]+=+o[0],i[1]+=+o[1]),n},e.prototype.calculateCenterZoom=function(t,e){var n,i=this.getCenterInternal(),o=this.getResolution();return void 0!==i&&void 0!==o&&(n=[e[0]-t*(e[0]-i[0])/o,e[1]-t*(e[1]-i[1])/o]),n},e.prototype.getSizeFromViewport_=function(t){var e=[100,100],n='.ol-viewport[data-view="'+r(this)+'"]',i=document.querySelector(n);if(i){var o=getComputedStyle(i);e[0]=parseInt(o.width,10),e[1]=parseInt(o.height,10)}if(t){var a=e[0],s=e[1];e[0]=Math.abs(a*Math.cos(t))+Math.abs(s*Math.sin(t)),e[1]=Math.abs(a*Math.sin(t))+Math.abs(s*Math.cos(t))}return e},e.prototype.getCenter=function(){var t=this.getCenterInternal();return t?on(t,this.getProjection()):t},e.prototype.getCenterInternal=function(){return this.get(te)},e.prototype.getConstraints=function(){return this.constraints_},e.prototype.getHints=function(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()},e.prototype.calculateExtent=function(t){return function(t,e){return nn?Je(t,e,nn):t}(this.calculateExtentInternal(t),this.getProjection())},e.prototype.calculateExtentInternal=function(t){var e=t||this.getSizeFromViewport_(),n=this.getCenterInternal();ut(n,1);var i=this.getResolution();ut(void 0!==i,2);var o=this.getRotation();return ut(void 0!==o,3),Kt(n,i,o,e)},e.prototype.getMaxResolution=function(){return this.maxResolution_},e.prototype.getMinResolution=function(){return this.minResolution_},e.prototype.getMaxZoom=function(){return this.getZoomForResolution(this.minResolution_)},e.prototype.setMaxZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))},e.prototype.getMinZoom=function(){return this.getZoomForResolution(this.maxResolution_)},e.prototype.setMinZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))},e.prototype.setConstrainResolution=function(t){this.applyOptions_(this.getUpdatedOptions_({constrainResolution:t}))},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolution=function(){return this.get(ee)},e.prototype.getResolutions=function(){return this.resolutions_},e.prototype.getResolutionForExtent=function(t,e){return this.getResolutionForExtentInternal(an(t,this.getProjection()),e)},e.prototype.getResolutionForExtentInternal=function(t,e){var n=e||this.getSizeFromViewport_(),i=Wt(t)/n[0],o=Xt(t)/n[1];return Math.max(i,o)},e.prototype.getResolutionForValueFunction=function(t){var e=t||2,n=this.maxResolution_,i=this.minResolution_,o=Math.log(n/i)/Math.log(e);return function(t){return n/Math.pow(e,t*o)}},e.prototype.getRotation=function(){return this.get(ne)},e.prototype.getValueForResolutionFunction=function(t){var e=t||2,n=this.maxResolution_,i=this.minResolution_,o=Math.log(n/i)/Math.log(e);return function(t){return Math.log(n/t)/Math.log(e)/o}},e.prototype.getState=function(){var t=this.getCenterInternal(),e=this.getProjection(),n=this.getResolution(),i=this.getRotation();return{center:t.slice(0),projection:void 0!==e?e:null,resolution:n,rotation:i,zoom:this.getZoom()}},e.prototype.getZoom=function(){var t,e=this.getResolution();return void 0!==e&&(t=this.getZoomForResolution(e)),t},e.prototype.getZoomForResolution=function(t){var e,n,i=this.minZoom_||0;if(this.resolutions_){var o=E(this.resolutions_,t,1);i=o,e=this.resolutions_[o],n=o==this.resolutions_.length-1?2:e/this.resolutions_[o+1]}else e=this.maxResolution_,n=this.zoomFactor_;return i+Math.log(e/t)/Math.log(n)},e.prototype.getResolutionForZoom=function(t){if(this.resolutions_){if(this.resolutions_.length<=1)return 0;var e=dt(Math.floor(t),0,this.resolutions_.length-2),n=this.resolutions_[e]/this.resolutions_[e+1];return this.resolutions_[e]/Math.pow(n,dt(t-e,0,1))}return this.maxResolution_/Math.pow(this.zoomFactor_,t-this.minZoom_)},e.prototype.fit=function(t,e){var n,i=p({size:this.getSizeFromViewport_()},e||{});if(ut(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t))ut(!Bt(t),25),n=kn(o=an(t,this.getProjection()));else if(t.getType()===ve){var o;(n=kn(o=an(t.getExtent(),this.getProjection()))).rotate(this.getRotation(),Gt(o))}else{var r=nn;n=r?n.clone().transform(r,this.getProjection()):t}this.fitInternal(n,i)},e.prototype.fitInternal=function(t,e){var n=e||{},i=n.size;i||(i=this.getSizeFromViewport_());var o,r=void 0!==n.padding?n.padding:[0,0,0,0],a=void 0!==n.nearest&&n.nearest;o=void 0!==n.minResolution?n.minResolution:void 0!==n.maxZoom?this.getResolutionForZoom(n.maxZoom):0;for(var s=t.getFlatCoordinates(),u=this.getRotation(),l=Math.cos(-u),h=Math.sin(-u),c=1/0,p=1/0,f=-1/0,d=-1/0,_=t.getStride(),g=0,v=s.length;g<v;g+=_){var y=s[g]*l-s[g+1]*h,m=s[g]*h+s[g+1]*l;c=Math.min(c,y),p=Math.min(p,m),f=Math.max(f,y),d=Math.max(d,m)}var E=this.getResolutionForExtentInternal([c,p,f,d],[i[0]-r[1]-r[3],i[1]-r[0]-r[2]]);E=isNaN(E)?o:Math.max(E,o),E=this.getConstrainedResolution(E,a?0:1),h=-h;var T=(c+f)/2,w=(p+d)/2,x=[(T+=(r[1]-r[3])/2*E)*l-(w+=(r[0]-r[2])/2*E)*h,w*l+T*h],b=n.callback?n.callback:C;void 0!==n.duration?this.animateInternal({resolution:E,center:this.getConstrainedCenter(x,E),duration:n.duration,easing:n.easing},b):(this.targetResolution_=E,this.targetCenter_=x,this.applyTargetState_(!1,!0),zn(b,!0))},e.prototype.centerOn=function(t,e,n){this.centerOnInternal(rn(t,this.getProjection()),e,n)},e.prototype.centerOnInternal=function(t,e,n){var i=this.getRotation(),o=Math.cos(-i),r=Math.sin(-i),a=t[0]*o-t[1]*r,s=t[1]*o+t[0]*r,u=this.getResolution(),l=(a+=(e[0]/2-n[0])*u)*o-(s+=(n[1]-e[1]/2)*u)*(r=-r),h=s*o+a*r;this.setCenterInternal([l,h])},e.prototype.isDef=function(){return!!this.getCenterInternal()&&void 0!==this.getResolution()},e.prototype.adjustCenter=function(t){var e=on(this.targetCenter_,this.getProjection());this.setCenter([e[0]+t[0],e[1]+t[1]])},e.prototype.adjustCenterInternal=function(t){var e=this.targetCenter_;this.setCenterInternal([e[0]+t[0],e[1]+t[1]])},e.prototype.adjustResolution=function(t,e){var n=e&&rn(e,this.getProjection());this.adjustResolutionInternal(t,n)},e.prototype.adjustResolutionInternal=function(t,e){var n=this.getAnimating()||this.getInteracting(),i=this.getSizeFromViewport_(this.getRotation()),o=this.constraints_.resolution(this.targetResolution_*t,0,i,n);void 0!==e&&(this.targetCenter_=this.calculateCenterZoom(o,e)),this.targetResolution_*=t,this.applyTargetState_()},e.prototype.adjustZoom=function(t,e){this.adjustResolution(Math.pow(this.zoomFactor_,-t),e)},e.prototype.adjustRotation=function(t,e){e&&(e=rn(e,this.getProjection())),this.adjustRotationInternal(t,e)},e.prototype.adjustRotationInternal=function(t,e){var n=this.getAnimating()||this.getInteracting(),i=this.constraints_.rotation(this.targetRotation_+t,n);void 0!==e&&(this.targetCenter_=this.calculateCenterRotate(i,e)),this.targetRotation_+=t,this.applyTargetState_()},e.prototype.setCenter=function(t){this.setCenterInternal(rn(t,this.getProjection()))},e.prototype.setCenterInternal=function(t){this.targetCenter_=t,this.applyTargetState_()},e.prototype.setHint=function(t,e){return this.hints_[t]+=e,this.changed(),this.hints_[t]},e.prototype.setResolution=function(t){this.targetResolution_=t,this.applyTargetState_()},e.prototype.setRotation=function(t){this.targetRotation_=t,this.applyTargetState_()},e.prototype.setZoom=function(t){this.setResolution(this.getResolutionForZoom(t))},e.prototype.applyTargetState_=function(t,e){var n=this.getAnimating()||this.getInteracting()||e,i=this.constraints_.rotation(this.targetRotation_,n),o=this.getSizeFromViewport_(i),r=this.constraints_.resolution(this.targetResolution_,0,o,n),a=this.constraints_.center(this.targetCenter_,r,o,n);this.get(ne)!==i&&this.set(ne,i),this.get(ee)!==r&&this.set(ee,r),this.get(te)&&ie(this.get(te),a)||this.set(te,a),this.getAnimating()&&!t&&this.cancelAnimations()},e.prototype.resolveConstraints=function(t,e,n){var i=void 0!==t?t:200,o=e||0,r=this.constraints_.rotation(this.targetRotation_),a=this.getSizeFromViewport_(r),s=this.constraints_.resolution(this.targetResolution_,o,a),u=this.constraints_.center(this.targetCenter_,s,a);if(0===i)return this.targetResolution_=s,this.targetRotation_=r,this.targetCenter_=u,void this.applyTargetState_();this.getResolution()===s&&this.getRotation()===r&&this.getCenterInternal()&&ie(this.getCenterInternal(),u)||(this.getAnimating()&&this.cancelAnimations(),this.animateInternal({rotation:r,center:u,resolution:s,duration:i,easing:ae,anchor:n}))},e.prototype.beginInteraction=function(){this.resolveConstraints(0),this.setHint(1,1)},e.prototype.endInteraction=function(t,e,n){var i=n&&rn(n,this.getProjection());this.endInteractionInternal(t,e,i)},e.prototype.endInteractionInternal=function(t,e,n){this.setHint(1,-1),this.resolveConstraints(t,e,n)},e.prototype.getConstrainedCenter=function(t,e){var n=this.getSizeFromViewport_(this.getRotation());return this.constraints_.center(t,e||this.getResolution(),n)},e.prototype.getConstrainedZoom=function(t,e){var n=this.getResolutionForZoom(t);return this.getZoomForResolution(this.getConstrainedResolution(n,e))},e.prototype.getConstrainedResolution=function(t,e){var n=e||0,i=this.getSizeFromViewport_(this.getRotation());return this.constraints_.resolution(t,n,i)},e}(j);function Yn(t,e){var n=document.createElement("canvas");return t&&(n.width=t),e&&(n.height=e),n.getContext("2d")}function Zn(t,e){var n=e.parentNode;n&&n.replaceChild(t,e)}function Un(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}var Wn={OPACITY:"opacity",VISIBLE:"visible",EXTENT:"extent",Z_INDEX:"zIndex",MAX_RESOLUTION:"maxResolution",MIN_RESOLUTION:"minResolution",MAX_ZOOM:"maxZoom",MIN_ZOOM:"minZoom",SOURCE:"source"},Vn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Bn=function(t){function e(e){var n=t.call(this)||this,i=p({},e);return i[Wn.OPACITY]=void 0!==e.opacity?e.opacity:1,ut("number"==typeof i[Wn.OPACITY],64),i[Wn.VISIBLE]=void 0===e.visible||e.visible,i[Wn.Z_INDEX]=e.zIndex,i[Wn.MAX_RESOLUTION]=void 0!==e.maxResolution?e.maxResolution:1/0,i[Wn.MIN_RESOLUTION]=void 0!==e.minResolution?e.minResolution:0,i[Wn.MIN_ZOOM]=void 0!==e.minZoom?e.minZoom:-1/0,i[Wn.MAX_ZOOM]=void 0!==e.maxZoom?e.maxZoom:1/0,n.className_=void 0!==i.className?e.className:"ol-layer",delete i.className,n.setProperties(i),n.state_=null,n}return Vn(e,t),e.prototype.getClassName=function(){return this.className_},e.prototype.getLayerState=function(t){var e=this.state_||{layer:this,managed:void 0===t||t},n=this.getZIndex();return e.opacity=dt(Math.round(100*this.getOpacity())/100,0,1),e.sourceState=this.getSourceState(),e.visible=this.getVisible(),e.extent=this.getExtent(),e.zIndex=void 0!==n?n:!1===e.managed?1/0:0,e.maxResolution=this.getMaxResolution(),e.minResolution=Math.max(this.getMinResolution(),0),e.minZoom=this.getMinZoom(),e.maxZoom=this.getMaxZoom(),this.state_=e,e},e.prototype.getLayersArray=function(t){return i()},e.prototype.getLayerStatesArray=function(t){return i()},e.prototype.getExtent=function(){return this.get(Wn.EXTENT)},e.prototype.getMaxResolution=function(){return this.get(Wn.MAX_RESOLUTION)},e.prototype.getMinResolution=function(){return this.get(Wn.MIN_RESOLUTION)},e.prototype.getMinZoom=function(){return this.get(Wn.MIN_ZOOM)},e.prototype.getMaxZoom=function(){return this.get(Wn.MAX_ZOOM)},e.prototype.getOpacity=function(){return this.get(Wn.OPACITY)},e.prototype.getSourceState=function(){return i()},e.prototype.getVisible=function(){return this.get(Wn.VISIBLE)},e.prototype.getZIndex=function(){return this.get(Wn.Z_INDEX)},e.prototype.setExtent=function(t){this.set(Wn.EXTENT,t)},e.prototype.setMaxResolution=function(t){this.set(Wn.MAX_RESOLUTION,t)},e.prototype.setMinResolution=function(t){this.set(Wn.MIN_RESOLUTION,t)},e.prototype.setMaxZoom=function(t){this.set(Wn.MAX_ZOOM,t)},e.prototype.setMinZoom=function(t){this.set(Wn.MIN_ZOOM,t)},e.prototype.setOpacity=function(t){ut("number"==typeof t,64),this.set(Wn.OPACITY,t)},e.prototype.setVisible=function(t){this.set(Wn.VISIBLE,t)},e.prototype.setZIndex=function(t){this.set(Wn.Z_INDEX,t)},e.prototype.disposeInternal=function(){this.state_&&(this.state_.layer=null,this.state_=null),t.prototype.disposeInternal.call(this)},e}(j),Hn={UNDEFINED:"undefined",LOADING:"loading",READY:"ready",ERROR:"error"},qn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),$n={LAYERS:"layers"},Jn=function(t){function e(e){var n=this,i=e||{},o=p({},i);delete o.layers;var r=i.layers;return(n=t.call(this,o)||this).layersListenerKeys_=[],n.listenerKeys_={},n.addEventListener(F($n.LAYERS),n.handleLayersChanged_),r?Array.isArray(r)?r=new z(r.slice(),{unique:!0}):ut("function"==typeof r.getArray,43):r=new z(void 0,{unique:!0}),n.setLayers(r),n}return qn(e,t),e.prototype.handleLayerChange_=function(){this.changed()},e.prototype.handleLayersChanged_=function(){this.layersListenerKeys_.forEach(v),this.layersListenerKeys_.length=0;var t=this.getLayers();for(var e in this.layersListenerKeys_.push(_(t,h.ADD,this.handleLayersAdd_,this),_(t,h.REMOVE,this.handleLayersRemove_,this)),this.listenerKeys_)this.listenerKeys_[e].forEach(v);f(this.listenerKeys_);for(var n=t.getArray(),i=0,o=n.length;i<o;i++){var a=n[i];this.listenerKeys_[r(a)]=[_(a,c,this.handleLayerChange_,this),_(a,P.CHANGE,this.handleLayerChange_,this)]}this.changed()},e.prototype.handleLayersAdd_=function(t){var e=t.element;this.listenerKeys_[r(e)]=[_(e,c,this.handleLayerChange_,this),_(e,P.CHANGE,this.handleLayerChange_,this)],this.changed()},e.prototype.handleLayersRemove_=function(t){var e=r(t.element);this.listenerKeys_[e].forEach(v),delete this.listenerKeys_[e],this.changed()},e.prototype.getLayers=function(){return this.get($n.LAYERS)},e.prototype.setLayers=function(t){this.set($n.LAYERS,t)},e.prototype.getLayersArray=function(t){var e=void 0!==t?t:[];return this.getLayers().forEach((function(t){t.getLayersArray(e)})),e},e.prototype.getLayerStatesArray=function(t){var e=void 0!==t?t:[],n=e.length;this.getLayers().forEach((function(t){t.getLayerStatesArray(e)}));for(var i=this.getLayerState(),o=n,r=e.length;o<r;o++){var a=e[o];a.opacity*=i.opacity,a.visible=a.visible&&i.visible,a.maxResolution=Math.min(a.maxResolution,i.maxResolution),a.minResolution=Math.max(a.minResolution,i.minResolution),a.minZoom=Math.max(a.minZoom,i.minZoom),a.maxZoom=Math.min(a.maxZoom,i.maxZoom),void 0!==i.extent&&(void 0!==a.extent?a.extent=Yt(a.extent,i.extent):a.extent=i.extent)}return e},e.prototype.getSourceState=function(){return Hn.READY},e}(Bn);function Qn(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:(e[0]=t,e[1]=t),e)}var ti=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function ei(t,e){t.style.msTouchAction=e,t.style.touchAction=e,t.setAttribute("touch-action",e)}var ni,ii,oi=function(t){function e(e){var n=t.call(this)||this,i=function(t){var e=null;void 0!==t.keyboardEventTarget&&(e="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);var n,i,o,r={},a=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new Jn({layers:t.layers});return r[ot.LAYERGROUP]=a,r[ot.TARGET]=t.target,r[ot.VIEW]=void 0!==t.view?t.view:new Xn,void 0!==t.controls&&(Array.isArray(t.controls)?n=new z(t.controls.slice()):(ut("function"==typeof t.controls.getArray,47),n=t.controls)),void 0!==t.interactions&&(Array.isArray(t.interactions)?i=new z(t.interactions.slice()):(ut("function"==typeof t.interactions.getArray,48),i=t.interactions)),void 0!==t.overlays?Array.isArray(t.overlays)?o=new z(t.overlays.slice()):(ut("function"==typeof t.overlays.getArray,49),o=t.overlays):o=new z,{controls:n,interactions:i,keyboardEventTarget:e,overlays:o,values:r}}(e);n.boundHandleBrowserEvent_=n.handleBrowserEvent.bind(n),n.maxTilesLoading_=void 0!==e.maxTilesLoading?e.maxTilesLoading:16,n.pixelRatio_=void 0!==e.pixelRatio?e.pixelRatio:H,n.postRenderTimeoutHandle_,n.animationDelayKey_,n.animationDelay_=function(){this.animationDelayKey_=void 0,this.renderFrame_(Date.now())}.bind(n),n.coordinateToPixelTransform_=[1,0,0,1,0,0],n.pixelToCoordinateTransform_=[1,0,0,1,0,0],n.frameIndex_=0,n.frameState_=null,n.previousExtent_=null,n.viewPropertyListenerKey_=null,n.viewChangeListenerKey_=null,n.layerGroupPropertyListenerKeys_=null,n.viewport_=document.createElement("div"),n.viewport_.className="ol-viewport"+("ontouchstart"in window?" ol-touch":""),n.viewport_.style.position="relative",n.viewport_.style.overflow="hidden",n.viewport_.style.width="100%",n.viewport_.style.height="100%",n.overlayContainer_=document.createElement("div"),n.overlayContainer_.style.position="absolute",n.overlayContainer_.style.zIndex="0",n.overlayContainer_.style.width="100%",n.overlayContainer_.style.height="100%",n.overlayContainer_.className="ol-overlaycontainer",n.viewport_.appendChild(n.overlayContainer_),n.overlayContainerStopEvent_=document.createElement("div"),n.overlayContainerStopEvent_.style.position="absolute",n.overlayContainerStopEvent_.style.zIndex="0",n.overlayContainerStopEvent_.style.width="100%",n.overlayContainerStopEvent_.style.height="100%",n.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent",n.viewport_.appendChild(n.overlayContainerStopEvent_),n.mapBrowserEventHandler_=new nt(n,e.moveTolerance);var o=n.handleMapBrowserEvent.bind(n);for(var r in $)n.mapBrowserEventHandler_.addEventListener($[r],o);n.keyboardEventTarget_=i.keyboardEventTarget,n.keyHandlerKeys_=null,n.focusHandlerKeys_=null;var a=n.handleBrowserEvent.bind(n);return n.viewport_.addEventListener(P.CONTEXTMENU,a,!1),n.viewport_.addEventListener(P.WHEEL,a,!1),n.controls=i.controls||new z,n.interactions=i.interactions||new z,n.overlays_=i.overlays,n.overlayIdIndex_={},n.renderer_=null,n.handleResize_,n.postRenderFunctions_=[],n.tileQueue_=new ct(n.getTilePriority.bind(n),n.handleTileChange_.bind(n)),n.addEventListener(F(ot.LAYERGROUP),n.handleLayerGroupChanged_),n.addEventListener(F(ot.VIEW),n.handleViewChanged_),n.addEventListener(F(ot.SIZE),n.handleSizeChanged_),n.addEventListener(F(ot.TARGET),n.handleTargetChanged_),n.setProperties(i.values),n.controls.forEach(function(t){t.setMap(this)}.bind(n)),n.controls.addEventListener(h.ADD,function(t){t.element.setMap(this)}.bind(n)),n.controls.addEventListener(h.REMOVE,function(t){t.element.setMap(null)}.bind(n)),n.interactions.forEach(function(t){t.setMap(this)}.bind(n)),n.interactions.addEventListener(h.ADD,function(t){t.element.setMap(this)}.bind(n)),n.interactions.addEventListener(h.REMOVE,function(t){t.element.setMap(null)}.bind(n)),n.overlays_.forEach(n.addOverlayInternal_.bind(n)),n.overlays_.addEventListener(h.ADD,function(t){this.addOverlayInternal_(t.element)}.bind(n)),n.overlays_.addEventListener(h.REMOVE,function(t){var e=t.element.getId();void 0!==e&&delete this.overlayIdIndex_[e.toString()],t.element.setMap(null)}.bind(n)),n}return ti(e,t),e.prototype.createRenderer=function(){throw new Error("Use a map type that has a createRenderer method")},e.prototype.addControl=function(t){this.getControls().push(t)},e.prototype.addInteraction=function(t){this.getInteractions().push(t)},e.prototype.addLayer=function(t){this.getLayerGroup().getLayers().push(t)},e.prototype.addOverlay=function(t){this.getOverlays().push(t)},e.prototype.addOverlayInternal_=function(t){var e=t.getId();void 0!==e&&(this.overlayIdIndex_[e.toString()]=t),t.setMap(this)},e.prototype.disposeInternal=function(){this.mapBrowserEventHandler_.dispose(),this.viewport_.removeEventListener(P.CONTEXTMENU,this.boundHandleBrowserEvent_),this.viewport_.removeEventListener(P.WHEEL,this.boundHandleBrowserEvent_),void 0!==this.handleResize_&&(removeEventListener(P.RESIZE,this.handleResize_,!1),this.handleResize_=void 0),this.setTarget(null),t.prototype.disposeInternal.call(this)},e.prototype.forEachFeatureAtPixel=function(t,e,n){if(this.frameState_){var i=this.getCoordinateFromPixelInternal(t),o=void 0!==(n=void 0!==n?n:{}).hitTolerance?n.hitTolerance*this.frameState_.pixelRatio:0,r=void 0!==n.layerFilter?n.layerFilter:w,a=!1!==n.checkWrapped;return this.renderer_.forEachFeatureAtCoordinate(i,this.frameState_,o,a,e,null,r,null)}},e.prototype.getFeaturesAtPixel=function(t,e){var n=[];return this.forEachFeatureAtPixel(t,(function(t){n.push(t)}),e),n},e.prototype.forEachLayerAtPixel=function(t,e,n){if(this.frameState_){var i=n||{},o=void 0!==i.hitTolerance?i.hitTolerance*this.frameState_.pixelRatio:0,r=i.layerFilter||w;return this.renderer_.forEachLayerAtPixel(t,this.frameState_,o,e,r)}},e.prototype.hasFeatureAtPixel=function(t,e){if(!this.frameState_)return!1;var n=this.getCoordinateFromPixelInternal(t),i=void 0!==(e=void 0!==e?e:{}).layerFilter?e.layerFilter:w,o=void 0!==e.hitTolerance?e.hitTolerance*this.frameState_.pixelRatio:0,r=!1!==e.checkWrapped;return this.renderer_.hasFeatureAtCoordinate(n,this.frameState_,o,r,i,null)},e.prototype.getEventCoordinate=function(t){return this.getCoordinateFromPixel(this.getEventPixel(t))},e.prototype.getEventCoordinateInternal=function(t){return this.getCoordinateFromPixelInternal(this.getEventPixel(t))},e.prototype.getEventPixel=function(t){var e=this.viewport_.getBoundingClientRect(),n="changedTouches"in t?t.changedTouches[0]:t;return[n.clientX-e.left,n.clientY-e.top]},e.prototype.getTarget=function(){return this.get(ot.TARGET)},e.prototype.getTargetElement=function(){var t=this.getTarget();return void 0!==t?"string"==typeof t?document.getElementById(t):t:null},e.prototype.getCoordinateFromPixel=function(t){return on(this.getCoordinateFromPixelInternal(t),this.getView().getProjection())},e.prototype.getCoordinateFromPixelInternal=function(t){var e=this.frameState_;return e?sn(e.pixelToCoordinateTransform,t.slice()):null},e.prototype.getControls=function(){return this.controls},e.prototype.getOverlays=function(){return this.overlays_},e.prototype.getOverlayById=function(t){var e=this.overlayIdIndex_[t.toString()];return void 0!==e?e:null},e.prototype.getInteractions=function(){return this.interactions},e.prototype.getLayerGroup=function(){return this.get(ot.LAYERGROUP)},e.prototype.getLayers=function(){return this.getLayerGroup().getLayers()},e.prototype.getLoading=function(){for(var t=this.getLayerGroup().getLayerStatesArray(),e=0,n=t.length;e<n;++e){var i=t[e].layer.getSource();if(i&&i.loading)return!0}return!1},e.prototype.getPixelFromCoordinate=function(t){var e=rn(t,this.getView().getProjection());return this.getPixelFromCoordinateInternal(e)},e.prototype.getPixelFromCoordinateInternal=function(t){var e=this.frameState_;return e?sn(e.coordinateToPixelTransform,t.slice(0,2)):null},e.prototype.getRenderer=function(){return this.renderer_},e.prototype.getSize=function(){return this.get(ot.SIZE)},e.prototype.getView=function(){return this.get(ot.VIEW)},e.prototype.getViewport=function(){return this.viewport_},e.prototype.getOverlayContainer=function(){return this.overlayContainer_},e.prototype.getOverlayContainerStopEvent=function(){return this.overlayContainerStopEvent_},e.prototype.getTilePriority=function(t,e,n,i){var o=this.frameState_;if(!(o&&e in o.wantedTiles))return 1/0;if(!o.wantedTiles[e][t.getKey()])return 1/0;var r=o.viewState.center,a=n[0]-r[0],s=n[1]-r[1];return 65536*Math.log(i)+Math.sqrt(a*a+s*s)/i},e.prototype.handleBrowserEvent=function(t,e){var n=e||t.type,i=new Z(n,this,t);this.handleMapBrowserEvent(i)},e.prototype.handleMapBrowserEvent=function(t){if(this.frameState_){for(var e=t.originalEvent.target;e instanceof HTMLElement;){if(e.parentElement===this.overlayContainerStopEvent_)return;e=e.parentElement}t.frameState=this.frameState_;var n=this.getInteractions().getArray();if(!1!==this.dispatchEvent(t))for(var i=n.length-1;i>=0;i--){var o=n[i];if(o.getActive()&&!o.handleEvent(t))break}}},e.prototype.handlePostRender=function(){var t=this.frameState_,e=this.tileQueue_;if(!e.isEmpty()){var n=this.maxTilesLoading_,i=n;if(t){var o=t.viewHints;if(o[0]||o[1]){var r=!q&&Date.now()-t.time>8;n=r?0:8,i=r?0:2}}e.getTilesLoading()<n&&(e.reprioritize(),e.loadMoreTiles(n,i))}!t||!this.hasListener(at)||t.animate||this.tileQueue_.getTilesLoading()||this.getLoading()||this.renderer_.dispatchRenderEvent(at,t);for(var a=this.postRenderFunctions_,s=0,u=a.length;s<u;++s)a[s](this,t);a.length=0},e.prototype.handleSizeChanged_=function(){this.getView()&&this.getView().resolveConstraints(0),this.render()},e.prototype.handleTargetChanged_=function(){var t;if(this.getTarget()&&(t=this.getTargetElement()),this.focusHandlerKeys_){for(var e=0,n=this.focusHandlerKeys_.length;e<n;++e)v(this.focusHandlerKeys_[e]);this.focusHandlerKeys_=null}if(this.keyHandlerKeys_){for(e=0,n=this.keyHandlerKeys_.length;e<n;++e)v(this.keyHandlerKeys_[e]);this.keyHandlerKeys_=null}if(t){t.appendChild(this.viewport_),this.renderer_||(this.renderer_=this.createRenderer());var i=!0;t.hasAttribute("tabindex")&&(i=document.activeElement===t,this.focusHandlerKeys_=[_(t,P.FOCUS,ei.bind(this,this.viewport_,"none")),_(t,P.BLUR,ei.bind(this,this.viewport_,"auto"))]),ei(this.viewport_,i?"none":"auto");var o=this.keyboardEventTarget_?this.keyboardEventTarget_:t;this.keyHandlerKeys_=[_(o,P.KEYDOWN,this.handleBrowserEvent,this),_(o,P.KEYPRESS,this.handleBrowserEvent,this)],this.handleResize_||(this.handleResize_=this.updateSize.bind(this),window.addEventListener(P.RESIZE,this.handleResize_,!1))}else this.renderer_&&(clearTimeout(this.postRenderTimeoutHandle_),this.postRenderFunctions_.length=0,this.renderer_.dispose(),this.renderer_=null),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0),Un(this.viewport_),void 0!==this.handleResize_&&(removeEventListener(P.RESIZE,this.handleResize_,!1),this.handleResize_=void 0);this.updateSize()},e.prototype.handleTileChange_=function(){this.render()},e.prototype.handleViewPropertyChanged_=function(){this.render()},e.prototype.handleViewChanged_=function(){this.viewPropertyListenerKey_&&(v(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&(v(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);var t=this.getView();t&&(this.viewport_.setAttribute("data-view",r(t)),this.viewPropertyListenerKey_=_(t,c,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=_(t,P.CHANGE,this.handleViewPropertyChanged_,this),t.resolveConstraints(0)),this.render()},e.prototype.handleLayerGroupChanged_=function(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(v),this.layerGroupPropertyListenerKeys_=null);var t=this.getLayerGroup();t&&(this.layerGroupPropertyListenerKeys_=[_(t,c,this.render,this),_(t,P.CHANGE,this.render,this)]),this.render()},e.prototype.isRendered=function(){return!!this.frameState_},e.prototype.renderSync=function(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()},e.prototype.redrawText=function(){for(var t=this.getLayerGroup().getLayerStatesArray(),e=0,n=t.length;e<n;++e){var i=t[e].layer;i.hasRenderer()&&i.getRenderer().handleFontsChanged()}},e.prototype.render=function(){this.renderer_&&void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))},e.prototype.removeControl=function(t){return this.getControls().remove(t)},e.prototype.removeInteraction=function(t){return this.getInteractions().remove(t)},e.prototype.removeLayer=function(t){return this.getLayerGroup().getLayers().remove(t)},e.prototype.removeOverlay=function(t){return this.getOverlays().remove(t)},e.prototype.renderFrame_=function(t){var e,n,i=this.getSize(),o=this.getView(),r=this.frameState_,a=null;if(void 0!==i&&function(t){return t[0]>0&&t[1]>0}(i)&&o&&o.isDef()){var s=o.getHints(this.frameState_?this.frameState_.viewHints:void 0),u=o.getState();a={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,declutterItems:r?r.declutterItems:[],extent:Kt(u.center,u.resolution,u.rotation,i),index:this.frameIndex_++,layerIndex:0,layerStatesArray:this.getLayerGroup().getLayerStatesArray(),pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:i,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:u,viewHints:s,wantedTiles:{}}}this.frameState_=a,this.renderer_.renderFrame(a),a&&(a.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,a.postRenderFunctions),r&&(!this.previousExtent_||!Bt(this.previousExtent_)&&!Lt(a.extent,this.previousExtent_))&&(this.dispatchEvent(new X("movestart",this,r)),this.previousExtent_=Mt(this.previousExtent_)),this.previousExtent_&&!a.viewHints[0]&&!a.viewHints[1]&&!Lt(a.extent,this.previousExtent_)&&(this.dispatchEvent(new X("moveend",this,a)),e=a.extent,(n=this.previousExtent_)?(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3]):e.slice())),this.dispatchEvent(new X(it,this,a)),this.postRenderTimeoutHandle_=setTimeout(this.handlePostRender.bind(this),0)},e.prototype.setLayerGroup=function(t){this.set(ot.LAYERGROUP,t)},e.prototype.setSize=function(t){this.set(ot.SIZE,t)},e.prototype.setTarget=function(t){this.set(ot.TARGET,t)},e.prototype.setView=function(t){this.set(ot.VIEW,t)},e.prototype.updateSize=function(){var t=this.getTargetElement();if(t){var e=getComputedStyle(t);this.setSize([t.offsetWidth-parseFloat(e.borderLeftWidth)-parseFloat(e.paddingLeft)-parseFloat(e.paddingRight)-parseFloat(e.borderRightWidth),t.offsetHeight-parseFloat(e.borderTopWidth)-parseFloat(e.paddingTop)-parseFloat(e.paddingBottom)-parseFloat(e.borderBottomWidth)])}else this.setSize(void 0)},e}(j),ri=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ai=function(t){function e(e){var n=t.call(this)||this;return n.element=e.element?e.element:null,n.target_=null,n.map_=null,n.listenerKeys=[],n.render=e.render?e.render:C,e.target&&n.setTarget(e.target),n}return ri(e,t),e.prototype.disposeInternal=function(){Un(this.element),t.prototype.disposeInternal.call(this)},e.prototype.getMap=function(){return this.map_},e.prototype.setMap=function(t){this.map_&&Un(this.element);for(var e=0,n=this.listenerKeys.length;e<n;++e)v(this.listenerKeys[e]);this.listenerKeys.length=0,this.map_=t,this.map_&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==C&&this.listenerKeys.push(_(t,it,this.render,this)),t.render())},e.prototype.setTarget=function(t){this.target_="string"==typeof t?document.getElementById(t):t},e}(j),si="ol-hidden",ui="ol-unselectable",li="ol-control",hi="ol-collapsed",ci=(ii={},function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}());function pi(t,e){if(!t.visible)return!1;var n=e.resolution;if(n<t.minResolution||n>=t.maxResolution)return!1;var i=e.zoom;return i>t.minZoom&&i<=t.maxZoom}var fi=function(t){function e(e){var n=this,i=p({},e);delete i.source,(n=t.call(this,i)||this).mapPrecomposeKey_=null,n.mapRenderKey_=null,n.sourceChangeKey_=null,n.renderer_=null,e.render&&(n.render=e.render),e.map&&n.setMap(e.map),n.addEventListener(F(Wn.SOURCE),n.handleSourcePropertyChange_);var o=e.source?e.source:null;return n.setSource(o),n}return ci(e,t),e.prototype.getLayersArray=function(t){var e=t||[];return e.push(this),e},e.prototype.getLayerStatesArray=function(t){var e=t||[];return e.push(this.getLayerState()),e},e.prototype.getSource=function(){return this.get(Wn.SOURCE)||null},e.prototype.getSourceState=function(){var t=this.getSource();return t?t.getState():Hn.UNDEFINED},e.prototype.handleSourceChange_=function(){this.changed()},e.prototype.handleSourcePropertyChange_=function(){this.sourceChangeKey_&&(v(this.sourceChangeKey_),this.sourceChangeKey_=null);var t=this.getSource();t&&(this.sourceChangeKey_=_(t,P.CHANGE,this.handleSourceChange_,this)),this.changed()},e.prototype.getFeatures=function(t){return this.renderer_.getFeatures(t)},e.prototype.render=function(t,e){var n=this.getRenderer();if(n.prepareFrame(t))return n.renderFrame(t,e)},e.prototype.setMap=function(t){this.mapPrecomposeKey_&&(v(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&(v(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=_(t,rt,(function(t){t.frameState.layerStatesArray.push(this.getLayerState(!1))}),this),this.mapRenderKey_=_(this,P.CHANGE,t.render,t),this.changed())},e.prototype.setSource=function(t){this.set(Wn.SOURCE,t)},e.prototype.getRenderer=function(){return this.renderer_||(this.renderer_=this.createRenderer()),this.renderer_},e.prototype.hasRenderer=function(){return!!this.renderer_},e.prototype.createRenderer=function(){return null},e.prototype.disposeInternal=function(){this.setSource(null),t.prototype.disposeInternal.call(this)},e}(Bn),di=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function _i(t){this.updateElement_(t.frameState)}var gi=function(t){function e(e){var n=this,i=e||{};(n=t.call(this,{element:document.createElement("div"),render:i.render||_i,target:i.target})||this).ulElement_=document.createElement("ul"),n.collapsed_=void 0===i.collapsed||i.collapsed,n.overrideCollapsible_=void 0!==i.collapsible,n.collapsible_=void 0===i.collapsible||i.collapsible,n.collapsible_||(n.collapsed_=!1);var o=void 0!==i.className?i.className:"ol-attribution",r=void 0!==i.tipLabel?i.tipLabel:"Attributions",a=void 0!==i.collapseLabel?i.collapseLabel:"»";"string"==typeof a?(n.collapseLabel_=document.createElement("span"),n.collapseLabel_.textContent=a):n.collapseLabel_=a;var s=void 0!==i.label?i.label:"i";"string"==typeof s?(n.label_=document.createElement("span"),n.label_.textContent=s):n.label_=s;var u=n.collapsible_&&!n.collapsed_?n.collapseLabel_:n.label_,l=document.createElement("button");l.setAttribute("type","button"),l.title=r,l.appendChild(u),l.addEventListener(P.CLICK,n.handleClick_.bind(n),!1);var h=o+" "+ui+" "+li+(n.collapsed_&&n.collapsible_?" "+hi:"")+(n.collapsible_?"":" ol-uncollapsible"),c=n.element;return c.className=h,c.appendChild(n.ulElement_),c.appendChild(l),n.renderedAttributions_=[],n.renderedVisible_=!0,n}return di(e,t),e.prototype.collectSourceAttributions_=function(t){for(var e={},n=[],i=t.layerStatesArray,o=0,r=i.length;o<r;++o){var a=i[o];if(pi(a,t.viewState)){var s=a.layer.getSource();if(s){var u=s.getAttributions();if(u){var l=u(t);if(l)if(this.overrideCollapsible_||!1!==s.getAttributionsCollapsible()||this.setCollapsible(!1),Array.isArray(l))for(var h=0,c=l.length;h<c;++h)l[h]in e||(n.push(l[h]),e[l[h]]=!0);else l in e||(n.push(l),e[l]=!0)}}}}return n},e.prototype.updateElement_=function(t){if(t){var e=this.collectSourceAttributions_(t),n=e.length>0;if(this.renderedVisible_!=n&&(this.element.style.display=n?"":"none",this.renderedVisible_=n),!T(e,this.renderedAttributions_)){!function(t){for(;t.lastChild;)t.removeChild(t.lastChild)}(this.ulElement_);for(var i=0,o=e.length;i<o;++i){var r=document.createElement("li");r.innerHTML=e[i],this.ulElement_.appendChild(r)}this.renderedAttributions_=e}}else this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1)},e.prototype.handleClick_=function(t){t.preventDefault(),this.handleToggle_()},e.prototype.handleToggle_=function(){this.element.classList.toggle(hi),this.collapsed_?Zn(this.collapseLabel_,this.label_):Zn(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_},e.prototype.getCollapsible=function(){return this.collapsible_},e.prototype.setCollapsible=function(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),!t&&this.collapsed_&&this.handleToggle_())},e.prototype.setCollapsed=function(t){this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()},e.prototype.getCollapsed=function(){return this.collapsed_},e}(ai),vi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function yi(t){var e=t.frameState;if(e){var n=e.viewState.rotation;if(n!=this.rotation_){var i="rotate("+n+"rad)";if(this.autoHide_){var o=this.element.classList.contains(si);o||0!==n?o&&0!==n&&this.element.classList.remove(si):this.element.classList.add(si)}this.label_.style.transform=i}this.rotation_=n}}var mi=function(t){function e(e){var n=this,i=e||{};n=t.call(this,{element:document.createElement("div"),render:i.render||yi,target:i.target})||this;var o=void 0!==i.className?i.className:"ol-rotate",r=void 0!==i.label?i.label:"⇧";n.label_=null,"string"==typeof r?(n.label_=document.createElement("span"),n.label_.className="ol-compass",n.label_.textContent=r):(n.label_=r,n.label_.classList.add("ol-compass"));var a=i.tipLabel?i.tipLabel:"Reset rotation",s=document.createElement("button");s.className=o+"-reset",s.setAttribute("type","button"),s.title=a,s.appendChild(n.label_),s.addEventListener(P.CLICK,n.handleClick_.bind(n),!1);var u=o+" "+ui+" "+li,l=n.element;return l.className=u,l.appendChild(s),n.callResetNorth_=i.resetNorth?i.resetNorth:void 0,n.duration_=void 0!==i.duration?i.duration:250,n.autoHide_=void 0===i.autoHide||i.autoHide,n.rotation_=void 0,n.autoHide_&&n.element.classList.add(si),n}return vi(e,t),e.prototype.handleClick_=function(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()},e.prototype.resetNorth_=function(){var t=this.getMap().getView();t&&void 0!==t.getRotation()&&(this.duration_>0?t.animate({rotation:0,duration:this.duration_,easing:ae}):t.setRotation(0))},e}(ai),Ei=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ti=function(t){function e(e){var n=this,i=e||{};n=t.call(this,{element:document.createElement("div"),target:i.target})||this;var o=void 0!==i.className?i.className:"ol-zoom",r=void 0!==i.delta?i.delta:1,a=void 0!==i.zoomInLabel?i.zoomInLabel:"+",s=void 0!==i.zoomOutLabel?i.zoomOutLabel:"−",u=void 0!==i.zoomInTipLabel?i.zoomInTipLabel:"Zoom in",l=void 0!==i.zoomOutTipLabel?i.zoomOutTipLabel:"Zoom out",h=document.createElement("button");h.className=o+"-in",h.setAttribute("type","button"),h.title=u,h.appendChild("string"==typeof a?document.createTextNode(a):a),h.addEventListener(P.CLICK,n.handleClick_.bind(n,r),!1);var c=document.createElement("button");c.className=o+"-out",c.setAttribute("type","button"),c.title=l,c.appendChild("string"==typeof s?document.createTextNode(s):s),c.addEventListener(P.CLICK,n.handleClick_.bind(n,-r),!1);var p=o+" "+ui+" "+li,f=n.element;return f.className=p,f.appendChild(h),f.appendChild(c),n.duration_=void 0!==i.duration?i.duration:250,n}return Ei(e,t),e.prototype.handleClick_=function(t,e){e.preventDefault(),this.zoomByDelta_(t)},e.prototype.zoomByDelta_=function(t){var e=this.getMap().getView();if(e){var n=e.getZoom();if(void 0!==n){var i=e.getConstrainedZoom(n+t);this.duration_>0?(e.getAnimating()&&e.cancelAnimations(),e.animate({zoom:i,duration:this.duration_,easing:ae})):e.setZoom(i)}}},e}(ai),wi=function(){function t(t,e,n){this.decay_=t,this.minVelocity_=e,this.delay_=n,this.points_=[],this.angle_=0,this.initialVelocity_=0}return t.prototype.begin=function(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0},t.prototype.update=function(t,e){this.points_.push(t,e,Date.now())},t.prototype.end=function(){if(this.points_.length<6)return!1;var t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;for(var n=e-3;n>0&&this.points_[n+2]>t;)n-=3;var i=this.points_[e+2]-this.points_[n+2];if(i<1e3/60)return!1;var o=this.points_[e]-this.points_[n],r=this.points_[e+1]-this.points_[n+1];return this.angle_=Math.atan2(r,o),this.initialVelocity_=Math.sqrt(o*o+r*r)/i,this.initialVelocity_>this.minVelocity_},t.prototype.getDistance=function(){return(this.minVelocity_-this.initialVelocity_)/this.decay_},t.prototype.getAngle=function(){return this.angle_},t}(),xi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function Ci(t,e,n,i){var o=t.getZoom();if(void 0!==o){var r=t.getConstrainedZoom(o+e),a=t.getResolutionForZoom(r);t.getAnimating()&&t.cancelAnimations(),t.animate({resolution:a,anchor:n,duration:void 0!==i?i:250,easing:ae})}}var bi=function(t){function e(e){var n=t.call(this)||this;return e.handleEvent&&(n.handleEvent=e.handleEvent),n.map_=null,n.setActive(!0),n}return xi(e,t),e.prototype.getActive=function(){return this.get("active")},e.prototype.getMap=function(){return this.map_},e.prototype.handleEvent=function(t){return!0},e.prototype.setActive=function(t){this.set("active",t)},e.prototype.setMap=function(t){this.map_=t},e}(j),Oi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function Si(t){var e=!1;if(t.type==$.DBLCLICK){var n=t.originalEvent,i=t.map,o=t.coordinate,r=n.shiftKey?-this.delta_:this.delta_;Ci(i.getView(),r,o,this.duration_),t.preventDefault(),e=!0}return!e}var Pi=function(t){function e(e){var n=t.call(this,{handleEvent:Si})||this,i=e||{};return n.delta_=i.delta?i.delta:1,n.duration_=void 0!==i.duration?i.duration:250,n}return Oi(e,t),e}(bi),Ri=function(t){var e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},Ii=function(t){return t.target.getTargetElement()===document.activeElement},Mi=w,Li=function(t){var e=t.originalEvent;return 0==e.button&&!(V&&B&&e.ctrlKey)},Ai=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},Di=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},Fi=function(t){var e=t.target.tagName;return"INPUT"!==e&&"SELECT"!==e&&"TEXTAREA"!==e},ji=function(t){var e=t.pointerEvent;return ut(void 0!==e,56),"mouse"==e.pointerType},Ni=function(t){var e=t.pointerEvent;return ut(void 0!==e,56),e.isPrimary&&0===e.button},ki=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function Gi(t){for(var e=t.length,n=0,i=0,o=0;o<e;o++)n+=t[o].clientX,i+=t[o].clientY;return[n/e,i/e]}var zi=function(t){function e(e){var n=this,i=e||{};return n=t.call(this,i)||this,i.handleDownEvent&&(n.handleDownEvent=i.handleDownEvent),i.handleDragEvent&&(n.handleDragEvent=i.handleDragEvent),i.handleMoveEvent&&(n.handleMoveEvent=i.handleMoveEvent),i.handleUpEvent&&(n.handleUpEvent=i.handleUpEvent),i.stopDown&&(n.stopDown=i.stopDown),n.handlingDownUpSequence=!1,n.trackedPointers_={},n.targetPointers=[],n}return ki(e,t),e.prototype.handleDownEvent=function(t){return!1},e.prototype.handleDragEvent=function(t){},e.prototype.handleEvent=function(t){if(!t.pointerEvent)return!0;var e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==$.POINTERDRAG)this.handleDragEvent(t);else if(t.type==$.POINTERUP){var n=this.handleUpEvent(t);this.handlingDownUpSequence=n&&this.targetPointers.length>0}}else if(t.type==$.POINTERDOWN){var i=this.handleDownEvent(t);i&&t.preventDefault(),this.handlingDownUpSequence=i,e=this.stopDown(i)}else t.type==$.POINTERMOVE&&this.handleMoveEvent(t);return!e},e.prototype.handleMoveEvent=function(t){},e.prototype.handleUpEvent=function(t){return!1},e.prototype.stopDown=function(t){return t},e.prototype.updateTrackedPointers_=function(t){if(function(t){var e=t.type;return e===$.POINTERDOWN||e===$.POINTERDRAG||e===$.POINTERUP}(t)){var e=t.pointerEvent,n=e.pointerId.toString();t.type==$.POINTERUP?delete this.trackedPointers_[n]:t.type==$.POINTERDOWN?this.trackedPointers_[n]=e:n in this.trackedPointers_&&(this.trackedPointers_[n]=e),this.targetPointers=d(this.trackedPointers_)}},e}(bi),Ki=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function Xi(t){return Ai(t)&&Ni(t)}var Yi=function(t){function e(e){var n=t.call(this,{stopDown:x})||this,i=e||{};return n.kinetic_=i.kinetic,n.lastCentroid=null,n.lastPointersCount_,n.panning_=!1,n.condition_=i.condition?i.condition:Xi,n.noKinetic_=!1,n}return Ki(e,t),e.prototype.handleDragEvent=function(t){this.panning_||(this.panning_=!0,this.getMap().getView().beginInteraction());var e,n,i=this.targetPointers,o=Gi(i);if(i.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(o[0],o[1]),this.lastCentroid){var r=[this.lastCentroid[0]-o[0],o[1]-this.lastCentroid[1]],a=t.map.getView();e=r,n=a.getResolution(),e[0]*=n,e[1]*=n,oe(r,a.getRotation()),a.adjustCenterInternal(r)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=o,this.lastPointersCount_=i.length},e.prototype.handleUpEvent=function(t){var e=t.map,n=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){var i=this.kinetic_.getDistance(),o=this.kinetic_.getAngle(),r=n.getCenterInternal(),a=e.getPixelFromCoordinateInternal(r),s=e.getCoordinateFromPixelInternal([a[0]-i*Math.cos(o),a[1]-i*Math.sin(o)]);n.animateInternal({center:n.getConstrainedCenter(s),duration:500,easing:ae})}return this.panning_&&(this.panning_=!1,n.endInteraction()),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>0&&this.condition_(t)){var e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.cancelAnimations(),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1},e}(zi),Zi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ui=function(t){function e(e){var n=this,i=e||{};return(n=t.call(this,{stopDown:x})||this).condition_=i.condition?i.condition:Ri,n.lastAngle_=void 0,n.duration_=void 0!==i.duration?i.duration:250,n}return Zi(e,t),e.prototype.handleDragEvent=function(t){if(ji(t)){var e=t.map,n=e.getView();if(n.getConstraints().rotation!==Jt){var i=e.getSize(),o=t.pixel,r=Math.atan2(i[1]/2-o[1],o[0]-i[0]/2);if(void 0!==this.lastAngle_){var a=r-this.lastAngle_;n.adjustRotationInternal(-a)}this.lastAngle_=r}}},e.prototype.handleUpEvent=function(t){return!ji(t)||(t.map.getView().endInteraction(this.duration_),!1)},e.prototype.handleDownEvent=function(t){return!(!ji(t)||!Li(t)||!this.condition_(t)||(t.map.getView().beginInteraction(),this.lastAngle_=void 0,0))},e}(zi),Wi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Vi=function(t){function e(e){var n=t.call(this)||this;return n.geometry_=null,n.element_=document.createElement("div"),n.element_.style.position="absolute",n.element_.className="ol-box "+e,n.map_=null,n.startPixel_=null,n.endPixel_=null,n}return Wi(e,t),e.prototype.disposeInternal=function(){this.setMap(null)},e.prototype.render_=function(){var t=this.startPixel_,e=this.endPixel_,n=this.element_.style;n.left=Math.min(t[0],e[0])+"px",n.top=Math.min(t[1],e[1])+"px",n.width=Math.abs(e[0]-t[0])+"px",n.height=Math.abs(e[1]-t[1])+"px"},e.prototype.setMap=function(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);var e=this.element_.style;e.left="inherit",e.top="inherit",e.width="inherit",e.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)},e.prototype.setPixels=function(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()},e.prototype.createOrUpdateGeometry=function(){var t=this.startPixel_,e=this.endPixel_,n=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixelInternal,this.map_);n[4]=n[0].slice(),this.geometry_?this.geometry_.setCoordinates([n]):this.geometry_=new Nn([n])},e.prototype.getGeometry=function(){return this.geometry_},e}(y),Bi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Hi=function(t){function e(e,n,i){var o=t.call(this,e)||this;return o.coordinate=n,o.mapBrowserEvent=i,o}return Bi(e,t),e}(b),qi=function(t){function e(e){var n=t.call(this)||this,i=e||{};return n.box_=new Vi(i.className||"ol-dragbox"),n.minArea_=void 0!==i.minArea?i.minArea:64,n.onBoxEnd_=i.onBoxEnd?i.onBoxEnd:C,n.startPixel_=null,n.condition_=i.condition?i.condition:Mi,n.boxEndCondition_=i.boxEndCondition?i.boxEndCondition:n.defaultBoxEndCondition,n}return Bi(e,t),e.prototype.defaultBoxEndCondition=function(t,e,n){var i=n[0]-e[0],o=n[1]-e[1];return i*i+o*o>=this.minArea_},e.prototype.getGeometry=function(){return this.box_.getGeometry()},e.prototype.handleDragEvent=function(t){ji(t)&&(this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new Hi("boxdrag",t.coordinate,t)))},e.prototype.handleUpEvent=function(t){return!ji(t)||(this.box_.setMap(null),this.boxEndCondition_(t,this.startPixel_,t.pixel)&&(this.onBoxEnd_(t),this.dispatchEvent(new Hi("boxend",t.coordinate,t))),!1)},e.prototype.handleDownEvent=function(t){return!(!ji(t)||!Li(t)||!this.condition_(t)||(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new Hi("boxstart",t.coordinate,t)),0))},e}(zi),$i=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function Ji(){var t,e=this.getMap(),n=e.getView(),i=e.getSize(),o=this.getGeometry().getExtent();if(this.out_){var r=n.calculateExtentInternal(i),a=(t=[e.getPixelFromCoordinateInternal(Nt(o)),e.getPixelFromCoordinateInternal(Ut(o))],function(t,e){for(var n=0,i=e.length;n<i;++n)At(t,e[n]);return t}(Mt(void 0),t));!function(t,e){var n=(t[2]-t[0])/2*(e-1),i=(t[3]-t[1])/2*(e-1);t[0]-=n,t[2]+=n,t[1]-=i,t[3]+=i}(r,1/n.getResolutionForExtentInternal(a,i)),o=r}var s=n.getConstrainedResolution(n.getResolutionForExtentInternal(o,i)),u=n.getConstrainedCenter(Gt(o),s);n.animateInternal({resolution:s,center:u,duration:this.duration_,easing:ae})}var Qi=function(t){function e(e){var n=this,i=e||{},o=i.condition?i.condition:Di;return(n=t.call(this,{condition:o,className:i.className||"ol-dragzoom",minArea:i.minArea,onBoxEnd:Ji})||this).duration_=void 0!==i.duration?i.duration:200,n.out_=void 0!==i.out&&i.out,n}return $i(e,t),e}(qi),to={LEFT:37,UP:38,RIGHT:39,DOWN:40},eo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function no(t){var e=!1;if(t.type==P.KEYDOWN){var n=t.originalEvent.keyCode;if(this.condition_(t)&&(n==to.DOWN||n==to.LEFT||n==to.RIGHT||n==to.UP)){var i=t.map.getView(),o=i.getResolution()*this.pixelDelta_,r=0,a=0;n==to.DOWN?a=-o:n==to.LEFT?r=-o:n==to.RIGHT?r=o:a=o;var s=[r,a];oe(s,i.getRotation()),function(t,e,n){var i=t.getCenterInternal();if(i){var o=[i[0]+e[0],i[1]+e[1]];t.animateInternal({duration:void 0!==n?n:250,easing:ue,center:t.getConstrainedCenter(o)})}}(i,s,this.duration_),t.preventDefault(),e=!0}}return!e}var io=function(t){function e(e){var n=t.call(this,{handleEvent:no})||this,i=e||{};return n.defaultCondition_=function(t){return Ai(t)&&Fi(t)},n.condition_=void 0!==i.condition?i.condition:n.defaultCondition_,n.duration_=void 0!==i.duration?i.duration:100,n.pixelDelta_=void 0!==i.pixelDelta?i.pixelDelta:128,n}return eo(e,t),e}(bi),oo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function ro(t){var e=!1;if(t.type==P.KEYDOWN||t.type==P.KEYPRESS){var n=t.originalEvent.charCode;if(this.condition_(t)&&(n=="+".charCodeAt(0)||n=="-".charCodeAt(0))){var i=t.map,o=n=="+".charCodeAt(0)?this.delta_:-this.delta_;Ci(i.getView(),o,void 0,this.duration_),t.preventDefault(),e=!0}}return!e}var ao=function(t){function e(e){var n=t.call(this,{handleEvent:ro})||this,i=e||{};return n.condition_=i.condition?i.condition:Fi,n.delta_=i.delta?i.delta:1,n.duration_=void 0!==i.duration?i.duration:100,n}return oo(e,t),e}(bi),so=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),uo="trackpad",lo=function(t){function e(e){var n=this,i=e||{};return(n=t.call(this,i)||this).totalDelta_=0,n.lastDelta_=0,n.maxDelta_=void 0!==i.maxDelta?i.maxDelta:1,n.duration_=void 0!==i.duration?i.duration:250,n.timeout_=void 0!==i.timeout?i.timeout:80,n.useAnchor_=void 0===i.useAnchor||i.useAnchor,n.condition_=i.condition?i.condition:Mi,n.lastAnchor_=null,n.startTime_=void 0,n.timeoutId_,n.mode_=void 0,n.trackpadEventGap_=400,n.trackpadTimeoutId_,n.trackpadDeltaPerZoom_=300,n}return so(e,t),e.prototype.endInteraction_=function(){this.trackpadTimeoutId_=void 0,this.getMap().getView().endInteraction(void 0,Math.sign(this.lastDelta_),this.lastAnchor_)},e.prototype.handleEvent=function(t){if(!this.condition_(t))return!0;if(t.type!==P.WHEEL)return!0;t.preventDefault();var e,n=t.map,i=t.originalEvent;if(this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==P.WHEEL&&(e=i.deltaY,W&&i.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(e/=H),i.deltaMode===WheelEvent.DOM_DELTA_LINE&&(e*=40)),0===e)return!1;this.lastDelta_=e;var o=Date.now();if(void 0===this.startTime_&&(this.startTime_=o),(!this.mode_||o-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(e)<4?uo:"wheel"),this.mode_===uo){var r=n.getView();return this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):r.beginInteraction(),this.trackpadTimeoutId_=setTimeout(this.endInteraction_.bind(this),this.trackpadEventGap_),r.adjustZoom(-e/this.trackpadDeltaPerZoom_,this.lastAnchor_),this.startTime_=o,!1}this.totalDelta_+=e;var a=Math.max(this.timeout_-(o-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,n),a),!1},e.prototype.handleWheelZoom_=function(t){var e=t.getView();e.getAnimating()&&e.cancelAnimations(),Ci(e,-dt(this.totalDelta_,-this.maxDelta_,this.maxDelta_),this.lastAnchor_,this.duration_),this.mode_=void 0,this.totalDelta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0},e.prototype.setMouseAnchor=function(t){this.useAnchor_=t,t||(this.lastAnchor_=null)},e}(bi),ho=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),co=function(t){function e(e){var n=this,i=e||{},o=i;return o.stopDown||(o.stopDown=x),(n=t.call(this,o)||this).anchor_=null,n.lastAngle_=void 0,n.rotating_=!1,n.rotationDelta_=0,n.threshold_=void 0!==i.threshold?i.threshold:.3,n.duration_=void 0!==i.duration?i.duration:250,n}return ho(e,t),e.prototype.handleDragEvent=function(t){var e=0,n=this.targetPointers[0],i=this.targetPointers[1],o=Math.atan2(i.clientY-n.clientY,i.clientX-n.clientX);if(void 0!==this.lastAngle_){var r=o-this.lastAngle_;this.rotationDelta_+=r,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=r}this.lastAngle_=o;var a=t.map,s=a.getView();if(s.getConstraints().rotation!==Jt){var u=a.getViewport().getBoundingClientRect(),l=Gi(this.targetPointers);l[0]-=u.left,l[1]-=u.top,this.anchor_=a.getCoordinateFromPixelInternal(l),this.rotating_&&(a.render(),s.adjustRotationInternal(e,this.anchor_))}},e.prototype.handleUpEvent=function(t){return!(this.targetPointers.length<2&&(t.map.getView().endInteraction(this.duration_),1))},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1},e}(zi),po=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),fo=function(t){function e(e){var n=this,i=e||{},o=i;return o.stopDown||(o.stopDown=x),(n=t.call(this,o)||this).anchor_=null,n.duration_=void 0!==i.duration?i.duration:400,n.lastDistance_=void 0,n.lastScaleDelta_=1,n}return po(e,t),e.prototype.handleDragEvent=function(t){var e=1,n=this.targetPointers[0],i=this.targetPointers[1],o=n.clientX-i.clientX,r=n.clientY-i.clientY,a=Math.sqrt(o*o+r*r);void 0!==this.lastDistance_&&(e=this.lastDistance_/a),this.lastDistance_=a;var s=t.map,u=s.getView();1!=e&&(this.lastScaleDelta_=e);var l=s.getViewport().getBoundingClientRect(),h=Gi(this.targetPointers);h[0]-=l.left,h[1]-=l.top,this.anchor_=s.getCoordinateFromPixelInternal(h),s.render(),u.adjustResolutionInternal(e,this.anchor_)},e.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var e=t.map.getView(),n=this.lastScaleDelta_>1?1:-1;return e.endInteraction(this.duration_,n),!1}return!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1},e}(zi),_o=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),go=function(t){function e(e,n,i,o){var r=t.call(this,e)||this;return r.inversePixelTransform=n,r.frameState=i,r.context=o,r}return _o(e,t),e}(b);function vo(t){var e=t[0];e!=(0|e)&&(e=e+.5|0);var n=t[1];n!=(0|n)&&(n=n+.5|0);var i=t[2];return i!=(0|i)&&(i=i+.5|0),"rgba("+e+","+n+","+i+","+(void 0===t[3]?1:t[3])+")"}function yo(t,e,n){return e+":"+t+":"+(n?function(t){return"string"==typeof t?t:vo(t)}(n):"null")}var mo=new(function(){function t(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32}return t.prototype.clear=function(){this.cache_={},this.cacheSize_=0},t.prototype.canExpireCache=function(){return this.cacheSize_>this.maxCacheSize_},t.prototype.expire=function(){if(this.canExpireCache()){var t=0;for(var e in this.cache_){var n=this.cache_[e];0!=(3&t++)||n.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}},t.prototype.get=function(t,e,n){var i=yo(t,e,n);return i in this.cache_?this.cache_[i]:null},t.prototype.set=function(t,e,n,i){var o=yo(t,e,n);this.cache_[o]=i,++this.cacheSize_},t.prototype.setSize=function(t){this.maxCacheSize_=t,this.expire()},t}());function Eo(t){return Array.isArray(t)?vo(t):t}var To=function(){function t(){}return t.prototype.drawCustom=function(t,e,n){},t.prototype.drawGeometry=function(t){},t.prototype.setStyle=function(t){},t.prototype.drawCircle=function(t,e){},t.prototype.drawFeature=function(t,e){},t.prototype.drawGeometryCollection=function(t,e){},t.prototype.drawLineString=function(t,e){},t.prototype.drawMultiLineString=function(t,e){},t.prototype.drawMultiPoint=function(t,e){},t.prototype.drawMultiPolygon=function(t,e){},t.prototype.drawPoint=function(t,e){},t.prototype.drawPolygon=function(t,e){},t.prototype.drawText=function(t,e){},t.prototype.setFillStrokeStyle=function(t,e){},t.prototype.setImageStyle=function(t,e){},t.prototype.setTextStyle=function(t,e){},t}(),wo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),xo=function(t){function e(e){var n=t.call(this)||this;return n.highWaterMark=void 0!==e?e:2048,n.count_=0,n.entries_={},n.oldest_=null,n.newest_=null,n}return wo(e,t),e.prototype.canExpireCache=function(){return this.getCount()>this.highWaterMark},e.prototype.clear=function(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null,this.dispatchEvent(P.CLEAR)},e.prototype.containsKey=function(t){return this.entries_.hasOwnProperty(t)},e.prototype.forEach=function(t){for(var e=this.oldest_;e;)t(e.value_,e.key_,this),e=e.newer},e.prototype.get=function(t,e){var n=this.entries_[t];return ut(void 0!==n,15),n===this.newest_?n.value_:(n===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(n.newer.older=n.older,n.older.newer=n.newer),n.newer=null,n.older=this.newest_,this.newest_.newer=n,this.newest_=n,n.value_)},e.prototype.remove=function(t){var e=this.entries_[t];return ut(void 0!==e,15),e===this.newest_?(this.newest_=e.older,this.newest_&&(this.newest_.newer=null)):e===this.oldest_?(this.oldest_=e.newer,this.oldest_&&(this.oldest_.older=null)):(e.newer.older=e.older,e.older.newer=e.newer),delete this.entries_[t],--this.count_,e.value_},e.prototype.getCount=function(){return this.count_},e.prototype.getKeys=function(){var t,e=new Array(this.count_),n=0;for(t=this.newest_;t;t=t.older)e[n++]=t.key_;return e},e.prototype.getValues=function(){var t,e=new Array(this.count_),n=0;for(t=this.newest_;t;t=t.older)e[n++]=t.value_;return e},e.prototype.peekLast=function(){return this.oldest_.value_},e.prototype.peekLastKey=function(){return this.oldest_.key_},e.prototype.peekFirstKey=function(){return this.newest_.key_},e.prototype.pop=function(){var t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_},e.prototype.replace=function(t,e){this.get(t),this.entries_[t].value_=e},e.prototype.set=function(t,e){ut(!(t in this.entries_),16);var n={key_:t,newer:null,older:this.newest_,value_:e};this.newest_?this.newest_.newer=n:this.oldest_=n,this.newest_=n,this.entries_[t]=n,++this.count_},e.prototype.setSize=function(t){this.highWaterMark=t},e}(S),Co=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),bo=function(t){function e(e){var n=t.call(this,e)||this;return n.consumers={},n}return Co(e,t),e.prototype.clear=function(){this.consumers={},t.prototype.clear.call(this)},e.prototype.get=function(e,n){var i=t.prototype.get.call(this,e),o=r(n);return o in this.consumers||(this.consumers[o]={}),this.consumers[o][e]=!0,i},e.prototype.prune=function(){t:for(;this.canExpireCache();){var t=this.peekLastKey();for(var e in this.consumers)if(t in this.consumers[e])break t;var n=this.pop();for(var e in n.width=0,n.height=0,this.consumers)delete this.consumers[e][t]}},e.prototype.release=function(t){delete this.consumers[r(t)]},e}(xo),Oo=[],So=new bo,Po={};function Ro(t,e,n,i){0!==e&&(t.translate(n,i),t.rotate(e),t.translate(-n,-i))}!function(){var t=["monospace","serif"];t.length}();var Io=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Mo=(function(t){function e(e,n,i,o,r,a,s){var u=t.call(this)||this;return u.context_=e,u.pixelRatio_=n,u.extent_=i,u.transform_=o,u.viewRotation_=r,u.squaredTolerance_=a,u.userTransform_=s,u.contextFillState_=null,u.contextStrokeState_=null,u.contextTextState_=null,u.fillState_=null,u.strokeState_=null,u.image_=null,u.imageAnchorX_=0,u.imageAnchorY_=0,u.imageHeight_=0,u.imageOpacity_=0,u.imageOriginX_=0,u.imageOriginY_=0,u.imageRotateWithView_=!1,u.imageRotation_=0,u.imageScale_=0,u.imageWidth_=0,u.text_="",u.textOffsetX_=0,u.textOffsetY_=0,u.textRotateWithView_=!1,u.textRotation_=0,u.textScale_=0,u.textFillState_=null,u.textStrokeState_=null,u.textState_=null,u.pixelCoordinates_=[],u.tmpLocalTransform_=[1,0,0,1,0,0],u}Io(e,t),e.prototype.drawImages_=function(t,e,n,i){if(this.image_){var o=me(t,e,n,2,this.transform_,this.pixelCoordinates_),r=this.context_,a=this.tmpLocalTransform_,s=r.globalAlpha;1!=this.imageOpacity_&&(r.globalAlpha=s*this.imageOpacity_);var u=this.imageRotation_;this.imageRotateWithView_&&(u+=this.viewRotation_);for(var l=0,h=o.length;l<h;l+=2){var c=o[l]-this.imageAnchorX_,p=o[l+1]-this.imageAnchorY_;if(0!==u||1!=this.imageScale_){var f=c+this.imageAnchorX_,d=p+this.imageAnchorY_;un(a,f,d,this.imageScale_,this.imageScale_,u,-f,-d),r.setTransform.apply(r,a)}r.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,c,p,this.imageWidth_,this.imageHeight_)}0===u&&1==this.imageScale_||r.setTransform(1,0,0,1,0,0),1!=this.imageOpacity_&&(r.globalAlpha=s)}},e.prototype.drawText_=function(t,e,n,i){if(this.textState_&&""!==this.text_){this.textFillState_&&this.setContextFillState_(this.textFillState_),this.textStrokeState_&&this.setContextStrokeState_(this.textStrokeState_),this.setContextTextState_(this.textState_);var o=me(t,e,n,i,this.transform_,this.pixelCoordinates_),r=this.context_,a=this.textRotation_;for(this.textRotateWithView_&&(a+=this.viewRotation_);e<n;e+=i){var s=o[e]+this.textOffsetX_,u=o[e+1]+this.textOffsetY_;if(0!==a||1!=this.textScale_){var l=un(this.tmpLocalTransform_,s,u,this.textScale_,this.textScale_,a,-s,-u);r.setTransform.apply(r,l)}this.textStrokeState_&&r.strokeText(this.text_,s,u),this.textFillState_&&r.fillText(this.text_,s,u)}0===a&&1==this.textScale_||r.setTransform(1,0,0,1,0,0)}},e.prototype.moveToLineTo_=function(t,e,n,i,o){var r=this.context_,a=me(t,e,n,i,this.transform_,this.pixelCoordinates_);r.moveTo(a[0],a[1]);var s=a.length;o&&(s-=2);for(var u=2;u<s;u+=2)r.lineTo(a[u],a[u+1]);return o&&r.closePath(),n},e.prototype.drawRings_=function(t,e,n,i){for(var o=0,r=n.length;o<r;++o)e=this.moveToLineTo_(t,e,n[o],i,!0);return e},e.prototype.drawCircle=function(t){if(Vt(this.extent_,t.getExtent())){if(this.fillState_||this.strokeState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=function(t,e,n){var i=t.getFlatCoordinates();if(i){var o=t.getStride();return me(i,0,i.length,o,e,n)}return null}(t,this.transform_,this.pixelCoordinates_),n=e[2]-e[0],i=e[3]-e[1],o=Math.sqrt(n*n+i*i),r=this.context_;r.beginPath(),r.arc(e[0],e[1],o,0,2*Math.PI),this.fillState_&&r.fill(),this.strokeState_&&r.stroke()}""!==this.text_&&this.drawText_(t.getCenter(),0,2,2)}},e.prototype.setStyle=function(t){this.setFillStrokeStyle(t.getFill(),t.getStroke()),this.setImageStyle(t.getImage()),this.setTextStyle(t.getText())},e.prototype.setTransform=function(t){this.transform_=t},e.prototype.drawGeometry=function(t){switch(t.getType()){case le:this.drawPoint(t);break;case he:this.drawLineString(t);break;case pe:this.drawPolygon(t);break;case fe:this.drawMultiPoint(t);break;case de:this.drawMultiLineString(t);break;case _e:this.drawMultiPolygon(t);break;case ge:this.drawGeometryCollection(t);break;case ve:this.drawCircle(t)}},e.prototype.drawFeature=function(t,e){var n=e.getGeometryFunction()(t);n&&Vt(this.extent_,n.getExtent())&&(this.setStyle(e),this.drawGeometry(n))},e.prototype.drawGeometryCollection=function(t){for(var e=t.getGeometriesArray(),n=0,i=e.length;n<i;++n)this.drawGeometry(e[n])},e.prototype.drawPoint=function(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));var e=t.getFlatCoordinates(),n=t.getStride();this.image_&&this.drawImages_(e,0,e.length,n),""!==this.text_&&this.drawText_(e,0,e.length,n)},e.prototype.drawMultiPoint=function(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));var e=t.getFlatCoordinates(),n=t.getStride();this.image_&&this.drawImages_(e,0,e.length,n),""!==this.text_&&this.drawText_(e,0,e.length,n)},e.prototype.drawLineString=function(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),Vt(this.extent_,t.getExtent())){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var e=this.context_,n=t.getFlatCoordinates();e.beginPath(),this.moveToLineTo_(n,0,n.length,t.getStride(),!1),e.stroke()}if(""!==this.text_){var i=t.getFlatMidpoint();this.drawText_(i,0,2,2)}}},e.prototype.drawMultiLineString=function(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));var e=t.getExtent();if(Vt(this.extent_,e)){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var n=this.context_,i=t.getFlatCoordinates(),o=0,r=t.getEnds(),a=t.getStride();n.beginPath();for(var s=0,u=r.length;s<u;++s)o=this.moveToLineTo_(i,o,r[s],a,!1);n.stroke()}if(""!==this.text_){var l=t.getFlatMidpoints();this.drawText_(l,0,l.length,2)}}},e.prototype.drawPolygon=function(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),Vt(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=this.context_;e.beginPath(),this.drawRings_(t.getOrientedFlatCoordinates(),0,t.getEnds(),t.getStride()),this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){var n=t.getFlatInteriorPoint();this.drawText_(n,0,2,2)}}},e.prototype.drawMultiPolygon=function(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),Vt(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=this.context_,n=t.getOrientedFlatCoordinates(),i=0,o=t.getEndss(),r=t.getStride();e.beginPath();for(var a=0,s=o.length;a<s;++a){var u=o[a];i=this.drawRings_(n,i,u,r)}this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){var l=t.getFlatInteriorPoints();this.drawText_(l,0,l.length,2)}}},e.prototype.setContextFillState_=function(t){var e=this.context_,n=this.contextFillState_;n?n.fillStyle!=t.fillStyle&&(n.fillStyle=t.fillStyle,e.fillStyle=t.fillStyle):(e.fillStyle=t.fillStyle,this.contextFillState_={fillStyle:t.fillStyle})},e.prototype.setContextStrokeState_=function(t){var e=this.context_,n=this.contextStrokeState_;n?(n.lineCap!=t.lineCap&&(n.lineCap=t.lineCap,e.lineCap=t.lineCap),e.setLineDash&&(T(n.lineDash,t.lineDash)||e.setLineDash(n.lineDash=t.lineDash),n.lineDashOffset!=t.lineDashOffset&&(n.lineDashOffset=t.lineDashOffset,e.lineDashOffset=t.lineDashOffset)),n.lineJoin!=t.lineJoin&&(n.lineJoin=t.lineJoin,e.lineJoin=t.lineJoin),n.lineWidth!=t.lineWidth&&(n.lineWidth=t.lineWidth,e.lineWidth=t.lineWidth),n.miterLimit!=t.miterLimit&&(n.miterLimit=t.miterLimit,e.miterLimit=t.miterLimit),n.strokeStyle!=t.strokeStyle&&(n.strokeStyle=t.strokeStyle,e.strokeStyle=t.strokeStyle)):(e.lineCap=t.lineCap,e.setLineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineJoin=t.lineJoin,e.lineWidth=t.lineWidth,e.miterLimit=t.miterLimit,e.strokeStyle=t.strokeStyle,this.contextStrokeState_={lineCap:t.lineCap,lineDash:t.lineDash,lineDashOffset:t.lineDashOffset,lineJoin:t.lineJoin,lineWidth:t.lineWidth,miterLimit:t.miterLimit,strokeStyle:t.strokeStyle})},e.prototype.setContextTextState_=function(t){var e=this.context_,n=this.contextTextState_,i=t.textAlign?t.textAlign:"center";n?(n.font!=t.font&&(n.font=t.font,e.font=t.font),n.textAlign!=i&&(n.textAlign=i,e.textAlign=i),n.textBaseline!=t.textBaseline&&(n.textBaseline=t.textBaseline,e.textBaseline=t.textBaseline)):(e.font=t.font,e.textAlign=i,e.textBaseline=t.textBaseline,this.contextTextState_={font:t.font,textAlign:i,textBaseline:t.textBaseline})},e.prototype.setFillStrokeStyle=function(t,e){if(t){var n=t.getColor();this.fillState_={fillStyle:Eo(n||"#000")}}else this.fillState_=null;if(e){var i=e.getColor(),o=e.getLineCap(),r=e.getLineDash(),a=e.getLineDashOffset(),s=e.getLineJoin(),u=e.getWidth(),l=e.getMiterLimit();this.strokeState_={lineCap:void 0!==o?o:"round",lineDash:r||Oo,lineDashOffset:a||0,lineJoin:void 0!==s?s:"round",lineWidth:this.pixelRatio_*(void 0!==u?u:1),miterLimit:void 0!==l?l:10,strokeStyle:Eo(i||"#000")}}else this.strokeState_=null},e.prototype.setImageStyle=function(t){if(t){var e=t.getAnchor(),n=t.getImage(1),i=t.getOrigin(),o=t.getSize();this.imageAnchorX_=e[0],this.imageAnchorY_=e[1],this.imageHeight_=o[1],this.image_=n,this.imageOpacity_=t.getOpacity(),this.imageOriginX_=i[0],this.imageOriginY_=i[1],this.imageRotateWithView_=t.getRotateWithView(),this.imageRotation_=t.getRotation(),this.imageScale_=t.getScale()*this.pixelRatio_,this.imageWidth_=o[0]}else this.image_=null},e.prototype.setTextStyle=function(t){if(t){var e=t.getFill();if(e){var n=e.getColor();this.textFillState_={fillStyle:Eo(n||"#000")}}else this.textFillState_=null;var i=t.getStroke();if(i){var o=i.getColor(),r=i.getLineCap(),a=i.getLineDash(),s=i.getLineDashOffset(),u=i.getLineJoin(),l=i.getWidth(),h=i.getMiterLimit();this.textStrokeState_={lineCap:void 0!==r?r:"round",lineDash:a||Oo,lineDashOffset:s||0,lineJoin:void 0!==u?u:"round",lineWidth:void 0!==l?l:1,miterLimit:void 0!==h?h:10,strokeStyle:Eo(o||"#000")}}else this.textStrokeState_=null;var c=t.getFont(),p=t.getOffsetX(),f=t.getOffsetY(),d=t.getRotateWithView(),_=t.getRotation(),g=t.getScale(),v=t.getText(),y=t.getTextAlign(),m=t.getTextBaseline();this.textState_={font:void 0!==c?c:"10px sans-serif",textAlign:void 0!==y?y:"center",textBaseline:void 0!==m?m:"middle"},this.text_=void 0!==v?v:"",this.textOffsetX_=void 0!==p?this.pixelRatio_*p:0,this.textOffsetY_=void 0!==f?this.pixelRatio_*f:0,this.textRotateWithView_=void 0!==d&&d,this.textRotation_=void 0!==_?_:0,this.textScale_=this.pixelRatio_*(void 0!==g?g:1)}else this.text_=""}}(To),{IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4}),Lo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function Ao(t,e){mo.expire()}var Do=function(t){function e(e){var n=t.call(this)||this;return n.map_=e,n.declutterTree_=null,n}return Lo(e,t),e.prototype.dispatchRenderEvent=function(t,e){i()},e.prototype.calculateMatrices2D=function(t){var e=t.viewState,n=t.coordinateToPixelTransform,i=t.pixelToCoordinateTransform;un(n,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),ln(i,n)},e.prototype.forEachFeatureAtCoordinate=function(t,e,n,i,o,r,a,s){var u,l=e.viewState;function h(t,e,n){return o.call(r,e,t?n:null)}var c=l.projection,p=t,f=[[0,0]];if(c.canWrapX()){var d=c.getExtent(),_=Wt(d),g=t[0];(g<d[0]||g>d[2])&&(p=[g+_*Math.ceil((d[0]-g)/_),t[1]]),i&&f.push([-_,0],[_,0])}var v,y=e.layerStatesArray,m=y.length;this.declutterTree_&&(v=this.declutterTree_.all().map((function(t){return t.value})));for(var E=[],T=0;T<f.length;T++)for(var w=m-1;w>=0;--w){var x=y[w],C=x.layer;if(C.hasRenderer()&&pi(x,l)&&a.call(s,C)){var b=C.getRenderer(),O=C.getSource();if(b&&O){var S=O.getWrapX()?p:t,P=h.bind(null,x.managed);E[0]=S[0]+f[T][0],E[1]=S[1]+f[T][1],u=b.forEachFeatureAtCoordinate(E,e,n,P,v)}if(u)return u}}},e.prototype.forEachLayerAtPixel=function(t,e,n,o,r){return i()},e.prototype.hasFeatureAtCoordinate=function(t,e,n,i,o,r){return void 0!==this.forEachFeatureAtCoordinate(t,e,n,i,w,this,o,r)},e.prototype.getMap=function(){return this.map_},e.prototype.renderFrame=function(t){this.declutterTree_=function(t,e){e&&e.clear();for(var n=t.declutterItems,i=n.length-1;i>=0;--i)for(var o=n[i],r=o.items,a=0,s=r.length;a<s;a+=3)e=r[a].renderDeclutter(r[a+1],r[a+2],o.opacity,e);return n.length=0,e}(t,this.declutterTree_)},e.prototype.scheduleExpireIconCache=function(t){mo.canExpireCache()&&t.postRenderFunctions.push(Ao)},e}(y),Fo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),jo=function(t){function e(e){var n=t.call(this,e)||this;n.labelCacheKey_=_(So,P.CLEAR,e.redrawText.bind(e)),n.element_=document.createElement("div");var i=n.element_.style;i.position="absolute",i.width="100%",i.height="100%",i.zIndex="0",n.element_.className=ui+" ol-layers";var o=e.getViewport();return o.insertBefore(n.element_,o.firstChild||null),n.children_=[],n.renderedVisible_=!0,n}return Fo(e,t),e.prototype.dispatchRenderEvent=function(t,e){var n=this.getMap();if(n.hasListener(t)){var i=new go(t,void 0,e);n.dispatchEvent(i)}},e.prototype.disposeInternal=function(){v(this.labelCacheKey_),t.prototype.disposeInternal.call(this)},e.prototype.renderFrame=function(e){if(e){this.calculateMatrices2D(e),this.dispatchRenderEvent(rt,e);var n=e.layerStatesArray.sort((function(t,e){return t.zIndex-e.zIndex})),i=e.viewState;this.children_.length=0;for(var o=null,r=0,a=n.length;r<a;++r){var s=n[r];if(e.layerIndex=r,pi(s,i)&&(s.sourceState==Hn.READY||s.sourceState==Hn.UNDEFINED)){var u=s.layer.render(e,o);u&&u!==o&&(this.children_.push(u),o=u)}}t.prototype.renderFrame.call(this,e),function(t,e){for(var n=t.childNodes,i=0;;++i){var o=n[i],r=e[i];if(!o&&!r)break;o!==r&&(o?r?t.insertBefore(r,o):(t.removeChild(o),--i):t.appendChild(r))}}(this.element_,this.children_),this.dispatchRenderEvent("postcompose",e),this.renderedVisible_||(this.element_.style.display="",this.renderedVisible_=!0),this.scheduleExpireIconCache(e)}else this.renderedVisible_&&(this.element_.style.display="none",this.renderedVisible_=!1)},e.prototype.forEachLayerAtPixel=function(t,e,n,i,o){for(var r=e.viewState,a=e.layerStatesArray,s=a.length-1;s>=0;--s){var u=a[s],l=u.layer;if(l.hasRenderer()&&pi(u,r)&&o(l)){var h=l.getRenderer().getDataAtPixel(t,e,n);if(h){var c=i(l,h);if(c)return c}}}},e}(Do),No=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ko=function(t){function e(e){return(e=p({},e)).controls||(e.controls=function(t){var e={},n=new z;return(void 0===e.zoom||e.zoom)&&n.push(new Ti(e.zoomOptions)),(void 0===e.rotate||e.rotate)&&n.push(new mi(e.rotateOptions)),(void 0===e.attribution||e.attribution)&&n.push(new gi(e.attributionOptions)),n}()),e.interactions||(e.interactions=function(t){var e={},n=new z,i=new wi(-.005,.05,100);return(void 0===e.altShiftDragRotate||e.altShiftDragRotate)&&n.push(new Ui),(void 0===e.doubleClickZoom||e.doubleClickZoom)&&n.push(new Pi({delta:e.zoomDelta,duration:e.zoomDuration})),(void 0===e.dragPan||e.dragPan)&&n.push(new Yi({condition:e.onFocusOnly?Ii:void 0,kinetic:i})),(void 0===e.pinchRotate||e.pinchRotate)&&n.push(new co),(void 0===e.pinchZoom||e.pinchZoom)&&n.push(new fo({duration:e.zoomDuration})),(void 0===e.keyboard||e.keyboard)&&(n.push(new io),n.push(new ao({delta:e.zoomDelta,duration:e.zoomDuration}))),(void 0===e.mouseWheelZoom||e.mouseWheelZoom)&&n.push(new lo({condition:e.onFocusOnly?Ii:void 0,duration:e.zoomDuration})),(void 0===e.shiftDragZoom||e.shiftDragZoom)&&n.push(new Qi({duration:e.zoomDuration})),n}()),t.call(this,e)||this}return No(e,t),e.prototype.createRenderer=function(){return new jo(this)},e}(oi),Go=.5,zo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ko=function(t){function e(e,n,i){var o=t.call(this)||this,r=i||{};return o.tileCoord=e,o.state=n,o.interimTile=null,o.hifi=!0,o.key="",o.transition_=void 0===r.transition?250:r.transition,o.transitionStarts_={},o}return zo(e,t),e.prototype.changed=function(){this.dispatchEvent(P.CHANGE)},e.prototype.disposeInternal=function(){this.setState(st.ABORT)},e.prototype.getKey=function(){return this.key+"/"+this.tileCoord},e.prototype.getInterimTile=function(){if(!this.interimTile)return this;var t=this.interimTile;do{if(t.getState()==st.LOADED)return this.transition_=0,t;t=t.interimTile}while(t);return this},e.prototype.refreshInterimChain=function(){if(this.interimTile){var t=this.interimTile,e=this;do{if(t.getState()==st.LOADED){t.interimTile=null;break}t.getState()==st.LOADING?e=t:t.getState()==st.IDLE?e.interimTile=t.interimTile:e=t,t=e.interimTile}while(t)}},e.prototype.getTileCoord=function(){return this.tileCoord},e.prototype.getState=function(){return this.state},e.prototype.setState=function(t){if(this.state!==st.ERROR&&this.state>t)throw new Error("Tile load sequence violation");this.state=t,this.changed()},e.prototype.load=function(){i()},e.prototype.getAlpha=function(t,e){if(!this.transition_)return 1;var n=this.transitionStarts_[t];if(n){if(-1===n)return 1}else n=e,this.transitionStarts_[t]=n;var i=e-n+1e3/60;return i>=this.transition_?1:re(i/this.transition_)},e.prototype.inTransition=function(t){return!!this.transition_&&-1!==this.transitionStarts_[t]},e.prototype.endTransition=function(t){this.transition_&&(this.transitionStarts_[t]=-1)},e}(S),Xo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Yo=function(t){function e(e,n,i,o){var r=t.call(this)||this;return r.extent=e,r.pixelRatio_=i,r.resolution=n,r.state=o,r}return Xo(e,t),e.prototype.changed=function(){this.dispatchEvent(P.CHANGE)},e.prototype.getExtent=function(){return this.extent},e.prototype.getImage=function(){return i()},e.prototype.getPixelRatio=function(){return this.pixelRatio_},e.prototype.getResolution=function(){return this.resolution},e.prototype.getState=function(){return this.state},e.prototype.load=function(){i()},e}(S),Zo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function Uo(t,e,n){var i=t;if(i.src&&q){var o=i.decode(),r=!0;return o.then((function(){r&&e()})).catch((function(t){r&&("EncodingError"===t.name&&"Invalid image type."===t.message?e():n())})),function(){r=!1}}var a=[g(i,P.LOAD,e),g(i,P.ERROR,n)];return function(){a.forEach(v)}}!function(t){function e(e,n,i,o,r,a){var s=t.call(this,e,n,i,Mo.IDLE)||this;return s.src_=o,s.image_=new Image,null!==r&&(s.image_.crossOrigin=r),s.unlisten_=null,s.state=Mo.IDLE,s.imageLoadFunction_=a,s}Zo(e,t),e.prototype.getImage=function(){return this.image_},e.prototype.handleImageError_=function(){this.state=Mo.ERROR,this.unlistenImage_(),this.changed()},e.prototype.handleImageLoad_=function(){void 0===this.resolution&&(this.resolution=Xt(this.extent)/this.image_.height),this.state=Mo.LOADED,this.unlistenImage_(),this.changed()},e.prototype.load=function(){this.state!=Mo.IDLE&&this.state!=Mo.ERROR||(this.state=Mo.LOADING,this.changed(),this.imageLoadFunction_(this,this.src_),this.unlisten_=Uo(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))},e.prototype.setImage=function(t){this.image_=t},e.prototype.unlistenImage_=function(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}}(Yo);var Wo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function Vo(){var t=Yn(1,1);return t.fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas}var Bo=function(t){function e(e,n,i,o,r,a){var s=t.call(this,e,n,a)||this;return s.crossOrigin_=o,s.src_=i,s.image_=new Image,null!==o&&(s.image_.crossOrigin=o),s.unlisten_=null,s.tileLoadFunction_=r,s}return Wo(e,t),e.prototype.disposeInternal=function(){this.state==st.LOADING&&(this.unlistenImage_(),this.image_=Vo()),this.interimTile&&this.interimTile.dispose(),t.prototype.disposeInternal.call(this)},e.prototype.getImage=function(){return this.image_},e.prototype.getKey=function(){return this.src_},e.prototype.handleImageError_=function(){this.state=st.ERROR,this.unlistenImage_(),this.image_=Vo(),this.changed()},e.prototype.handleImageLoad_=function(){var t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=st.LOADED:this.state=st.EMPTY,this.unlistenImage_(),this.changed()},e.prototype.load=function(){this.state==st.ERROR&&(this.state=st.IDLE,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),this.state==st.IDLE&&(this.state=st.LOADING,this.changed(),this.tileLoadFunction_(this,this.src_),this.unlisten_=Uo(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))},e.prototype.unlistenImage_=function(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)},e}(Ko);function Ho(t,e,n,i){return void 0!==i?(i[0]=t,i[1]=e,i[2]=n,i):[t,e,n]}function qo(t,e,n){return t+"/"+e+"/"+n}function $o(t){return qo(t[0],t[1],t[2])}var Jo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Qo=function(t){function e(e){return t.call(this,e)||this}return Jo(e,t),e.prototype.expireCache=function(t){for(;this.canExpireCache()&&!(this.peekLast().getKey()in t);)this.pop().dispose()},e.prototype.pruneExceptNewestZ=function(){if(0!==this.getCount()){var t=function(t){return t.split("/").map(Number)}(this.peekFirstKey())[0];this.forEach(function(e){e.tileCoord[0]!==t&&(this.remove($o(e.tileCoord)),e.dispose())}.bind(this))}},e}(xo);function tr(t,e,n,i){var o=n-t,r=i-e,a=Math.sqrt(o*o+r*r);return[Math.round(n+o/a),Math.round(i+r/a)]}var er=10,nr=function(){function t(t,e,n,i,o){this.sourceProj_=t,this.targetProj_=e;var r={},a=qe(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){var e=t[0]+"/"+t[1];return r[e]||(r[e]=a(t)),r[e]},this.maxSourceExtent_=i,this.errorThresholdSquared_=o*o,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!i&&!!this.sourceProj_.getExtent()&&Wt(i)==Wt(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?Wt(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?Wt(this.targetProj_.getExtent()):null;var s=Zt(n),u=Ut(n),l=kt(n),h=Nt(n),c=this.transformInv_(s),p=this.transformInv_(u),f=this.transformInv_(l),d=this.transformInv_(h);if(this.addQuad_(s,u,l,h,c,p,f,d,er),this.wrapsXInSource_){var _=1/0;this.triangles_.forEach((function(t,e,n){_=Math.min(_,t.source[0][0],t.source[1][0],t.source[2][0])})),this.triangles_.forEach(function(t){if(Math.max(t.source[0][0],t.source[1][0],t.source[2][0])-_>this.sourceWorldWidth_/2){var e=[[t.source[0][0],t.source[0][1]],[t.source[1][0],t.source[1][1]],[t.source[2][0],t.source[2][1]]];e[0][0]-_>this.sourceWorldWidth_/2&&(e[0][0]-=this.sourceWorldWidth_),e[1][0]-_>this.sourceWorldWidth_/2&&(e[1][0]-=this.sourceWorldWidth_),e[2][0]-_>this.sourceWorldWidth_/2&&(e[2][0]-=this.sourceWorldWidth_);var n=Math.min(e[0][0],e[1][0],e[2][0]);Math.max(e[0][0],e[1][0],e[2][0])-n<this.sourceWorldWidth_/2&&(t.source=e)}}.bind(this))}r={}}return t.prototype.addTriangle_=function(t,e,n,i,o,r){this.triangles_.push({source:[i,o,r],target:[t,e,n]})},t.prototype.addQuad_=function(t,e,n,i,o,r,a,s,u){var l=bt([o,r,a,s]),h=this.sourceWorldWidth_?Wt(l)/this.sourceWorldWidth_:null,c=this.sourceWorldWidth_,p=this.sourceProj_.canWrapX()&&h>.5&&h<1,f=!1;if(u>0&&(this.targetProj_.isGlobal()&&this.targetWorldWidth_&&(f=Wt(bt([t,e,n,i]))/this.targetWorldWidth_>.25||f),!p&&this.sourceProj_.isGlobal()&&h&&(f=h>.25||f)),f||!this.maxSourceExtent_||Vt(l,this.maxSourceExtent_)){if(!(f||isFinite(o[0])&&isFinite(o[1])&&isFinite(r[0])&&isFinite(r[1])&&isFinite(a[0])&&isFinite(a[1])&&isFinite(s[0])&&isFinite(s[1]))){if(!(u>0))return;f=!0}if(u>0){if(!f){var d=[(t[0]+n[0])/2,(t[1]+n[1])/2],_=this.transformInv_(d),g=void 0;g=p?(mt(o[0],c)+mt(a[0],c))/2-mt(_[0],c):(o[0]+a[0])/2-_[0];var v=(o[1]+a[1])/2-_[1];f=g*g+v*v>this.errorThresholdSquared_}if(f){if(Math.abs(t[0]-n[0])<=Math.abs(t[1]-n[1])){var y=[(e[0]+n[0])/2,(e[1]+n[1])/2],m=this.transformInv_(y),E=[(i[0]+t[0])/2,(i[1]+t[1])/2],T=this.transformInv_(E);this.addQuad_(t,e,y,E,o,r,m,T,u-1),this.addQuad_(E,y,n,i,T,m,a,s,u-1)}else{var w=[(t[0]+e[0])/2,(t[1]+e[1])/2],x=this.transformInv_(w),C=[(n[0]+i[0])/2,(n[1]+i[1])/2],b=this.transformInv_(C);this.addQuad_(t,w,C,i,o,x,b,s,u-1),this.addQuad_(w,e,n,C,x,r,a,b,u-1)}return}}if(p){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}this.addTriangle_(t,n,i,o,a,s),this.addTriangle_(t,e,n,o,r,a)}},t.prototype.calculateSourceExtent=function(){var t=[1/0,1/0,-1/0,-1/0];return this.triangles_.forEach((function(e,n,i){var o=e.source;At(t,o[0]),At(t,o[1]),At(t,o[2])})),t},t.prototype.getTriangles=function(){return this.triangles_},t}(),ir=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),or=function(t){function e(e,n,i,o,r,a,s,u,l,h,c){var p=t.call(this,r,st.IDLE)||this;p.renderEdges_=void 0!==c&&c,p.pixelRatio_=s,p.gutter_=u,p.canvas_=null,p.sourceTileGrid_=n,p.targetTileGrid_=o,p.wrappedTileCoord_=a||r,p.sourceTiles_=[],p.sourcesListenerKeys_=null,p.sourceZ_=0;var f=o.getTileCoordExtent(p.wrappedTileCoord_),d=p.targetTileGrid_.getExtent(),_=p.sourceTileGrid_.getExtent(),g=d?Yt(f,d):f;if(0===jt(g))return p.state=st.EMPTY,p;var v=e.getExtent();v&&(_=_?Yt(_,v):v);var y=o.getResolution(p.wrappedTileCoord_[0]),m=function(t,e,n,i){var o=$e(n,e,t),r=Ue(e,i,n),a=e.getMetersPerUnit();void 0!==a&&(r*=a);var s=t.getMetersPerUnit();void 0!==s&&(r/=s);var u=t.getExtent();if(!u||St(u,o)){var l=Ue(t,r,o)/r;isFinite(l)&&l>0&&(r/=l)}return r}(e,i,Gt(g),y);if(!isFinite(m)||m<=0)return p.state=st.EMPTY,p;var E=void 0!==h?h:Go;if(p.triangulation_=new nr(e,i,g,_,m*E),0===p.triangulation_.getTriangles().length)return p.state=st.EMPTY,p;p.sourceZ_=n.getZForResolution(m);var T=p.triangulation_.calculateSourceExtent();if(_&&(e.canWrapX()?(T[1]=dt(T[1],_[1],_[3]),T[3]=dt(T[3],_[1],_[3])):T=Yt(T,_)),jt(T)){for(var w=n.getTileRangeForExtentAndZ(T,p.sourceZ_),x=w.minX;x<=w.maxX;x++)for(var C=w.minY;C<=w.maxY;C++){var b=l(p.sourceZ_,x,C,s);b&&p.sourceTiles_.push(b)}0===p.sourceTiles_.length&&(p.state=st.EMPTY)}else p.state=st.EMPTY;return p}return ir(e,t),e.prototype.disposeInternal=function(){this.state==st.LOADING&&this.unlistenSources_(),t.prototype.disposeInternal.call(this)},e.prototype.getImage=function(){return this.canvas_},e.prototype.reproject_=function(){var t=[];if(this.sourceTiles_.forEach(function(e,n,i){e&&e.getState()==st.LOADED&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(e.tileCoord),image:e.getImage()})}.bind(this)),this.sourceTiles_.length=0,0===t.length)this.state=st.ERROR;else{var e=this.wrappedTileCoord_[0],n=this.targetTileGrid_.getTileSize(e),i="number"==typeof n?n:n[0],o="number"==typeof n?n:n[1],r=this.targetTileGrid_.getResolution(e),a=this.sourceTileGrid_.getResolution(this.sourceZ_),s=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=function(t,e,n,i,o,r,a,s,u,l,h){var c=Yn(Math.round(n*t),Math.round(n*e));if(0===u.length)return c.canvas;c.scale(n,n);var p=[1/0,1/0,-1/0,-1/0];u.forEach((function(t,e,n){var i,o;i=p,(o=t.extent)[0]<i[0]&&(i[0]=o[0]),o[2]>i[2]&&(i[2]=o[2]),o[1]<i[1]&&(i[1]=o[1]),o[3]>i[3]&&(i[3]=o[3])}));var f=Wt(p),d=Xt(p),_=Yn(Math.round(n*f/i),Math.round(n*d/i)),g=n/i;u.forEach((function(t,e,n){var i=t.extent[0]-p[0],o=-(t.extent[3]-p[3]),r=Wt(t.extent),a=Xt(t.extent);_.drawImage(t.image,l,l,t.image.width-2*l,t.image.height-2*l,i*g,o*g,r*g,a*g)}));var v=Zt(a);return s.getTriangles().forEach((function(t,e,o){var a=t.source,s=t.target,u=a[0][0],l=a[0][1],h=a[1][0],f=a[1][1],d=a[2][0],g=a[2][1],y=(s[0][0]-v[0])/r,m=-(s[0][1]-v[1])/r,E=(s[1][0]-v[0])/r,T=-(s[1][1]-v[1])/r,w=(s[2][0]-v[0])/r,x=-(s[2][1]-v[1])/r,C=u,b=l;u=0,l=0;var O=function(t){for(var e=t.length,n=0;n<e;n++){for(var i=n,o=Math.abs(t[n][n]),r=n+1;r<e;r++){var a=Math.abs(t[r][n]);a>o&&(o=a,i=r)}if(0===o)return null;var s=t[i];t[i]=t[n],t[n]=s;for(var u=n+1;u<e;u++)for(var l=-t[u][n]/t[n][n],h=n;h<e+1;h++)n==h?t[u][h]=0:t[u][h]+=l*t[n][h]}for(var c=new Array(e),p=e-1;p>=0;p--){c[p]=t[p][e]/t[p][p];for(var f=p-1;f>=0;f--)t[f][e]-=t[f][p]*c[p]}return c}([[h-=C,f-=b,0,0,E-y],[d-=C,g-=b,0,0,w-y],[0,0,h,f,T-m],[0,0,d,g,x-m]]);if(O){c.save(),c.beginPath();var S=(y+E+w)/3,P=(m+T+x)/3,R=tr(S,P,y,m),I=tr(S,P,E,T),M=tr(S,P,w,x);c.moveTo(I[0],I[1]),c.lineTo(R[0],R[1]),c.lineTo(M[0],M[1]),c.clip(),c.transform(O[0],O[2],O[1],O[3],y,m),c.translate(p[0]-C,p[3]-b),c.scale(i/n,-i/n),c.drawImage(_.canvas,0,0),c.restore()}})),h&&(c.save(),c.strokeStyle="black",c.lineWidth=1,s.getTriangles().forEach((function(t,e,n){var i=t.target,o=(i[0][0]-v[0])/r,a=-(i[0][1]-v[1])/r,s=(i[1][0]-v[0])/r,u=-(i[1][1]-v[1])/r,l=(i[2][0]-v[0])/r,h=-(i[2][1]-v[1])/r;c.beginPath(),c.moveTo(s,u),c.lineTo(o,a),c.lineTo(l,h),c.closePath(),c.stroke()})),c.restore()),c.canvas}(i,o,this.pixelRatio_,a,this.sourceTileGrid_.getExtent(),r,s,this.triangulation_,t,this.gutter_,this.renderEdges_),this.state=st.LOADED}this.changed()},e.prototype.load=function(){if(this.state==st.IDLE){this.state=st.LOADING,this.changed();var t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach(function(e,n,i){var o=e.getState();if(o==st.IDLE||o==st.LOADING){t++;var r=_(e,P.CHANGE,(function(n){var i=e.getState();i!=st.LOADED&&i!=st.ERROR&&i!=st.EMPTY||(v(r),0==--t&&(this.unlistenSources_(),this.reproject_()))}),this);this.sourcesListenerKeys_.push(r)}}.bind(this)),this.sourceTiles_.forEach((function(t,e,n){t.getState()==st.IDLE&&t.load()})),0===t&&setTimeout(this.reproject_.bind(this),0)}},e.prototype.unlistenSources_=function(){this.sourcesListenerKeys_.forEach(v),this.sourcesListenerKeys_=null},e}(Ko);function rr(t,e){var n=/\{z\}/g,i=/\{x\}/g,o=/\{y\}/g,r=/\{-y\}/g;return function(a,s,u){return a?t.replace(n,a[0].toString()).replace(i,a[1].toString()).replace(o,a[2].toString()).replace(r,(function(){var t=a[0],n=e.getFullTileRange(t);return ut(n,55),(n.getHeight()-a[2]-1).toString()})):void 0}}function ar(t,e,n){}var sr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function ur(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}var lr=function(t){function e(e){var n=t.call(this)||this;return n.projection_=Ze(e.projection),n.attributions_=ur(e.attributions),n.attributionsCollapsible_=void 0===e.attributionsCollapsible||e.attributionsCollapsible,n.loading=!1,n.state_=void 0!==e.state?e.state:Hn.READY,n.wrapX_=void 0!==e.wrapX&&e.wrapX,n}return sr(e,t),e.prototype.getAttributions=function(){return this.attributions_},e.prototype.getAttributionsCollapsible=function(){return this.attributionsCollapsible_},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolutions=function(){return i()},e.prototype.getState=function(){return this.state_},e.prototype.getWrapX=function(){return this.wrapX_},e.prototype.refresh=function(){this.changed()},e.prototype.setAttributions=function(t){this.attributions_=ur(t),this.changed()},e.prototype.setState=function(t){this.state_=t,this.changed()},e}(j),hr=function(){function t(t,e,n,i){this.minX=t,this.maxX=e,this.minY=n,this.maxY=i}return t.prototype.contains=function(t){return this.containsXY(t[1],t[2])},t.prototype.containsTileRange=function(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY},t.prototype.containsXY=function(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY},t.prototype.equals=function(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY},t.prototype.extend=function(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)},t.prototype.getHeight=function(){return this.maxY-this.minY+1},t.prototype.getSize=function(){return[this.getWidth(),this.getHeight()]},t.prototype.getWidth=function(){return this.maxX-this.minX+1},t.prototype.intersects=function(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY},t}();function cr(t,e,n,i,o){return void 0!==o?(o.minX=t,o.maxX=e,o.minY=n,o.maxY=i,o):new hr(t,e,n,i)}var pr=hr,fr=[0,0,0],dr=function(){function t(t){var e,n,i;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,ut((e=this.resolutions_,!0,n=function(t,e){return e-t}||m,e.every((function(t,i){if(0===i)return!0;var o=n(e[i-1],t);return!(o>0||0===o)}))),17),!t.origins)for(var o=0,r=this.resolutions_.length-1;o<r;++o)if(i){if(this.resolutions_[o]/this.resolutions_[o+1]!==i){i=void 0;break}}else i=this.resolutions_[o]/this.resolutions_[o+1];this.zoomFactor_=i,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,ut(this.origins_.length==this.resolutions_.length,20));var a=t.extent;void 0===a||this.origin_||this.origins_||(this.origin_=Zt(a)),ut(!this.origin_&&this.origins_||this.origin_&&!this.origins_,18),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,ut(this.tileSizes_.length==this.resolutions_.length,19)),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:ft,ut(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,22),this.extent_=void 0!==a?a:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map((function(t,e){return new pr(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1))}),this):a&&this.calculateTileRanges_(a)}return t.prototype.forEachTileCoord=function(t,e,n){for(var i=this.getTileRangeForExtentAndZ(t,e),o=i.minX,r=i.maxX;o<=r;++o)for(var a=i.minY,s=i.maxY;a<=s;++a)n([e,o,a])},t.prototype.forEachTileCoordParentTileRange=function(t,e,n,i){var o,r,a=null,s=t[0]-1;for(2===this.zoomFactor_?(o=t[1],r=t[2]):a=this.getTileCoordExtent(t,i);s>=this.minZoom;){if(e(s,2===this.zoomFactor_?cr(o=Math.floor(o/2),o,r=Math.floor(r/2),r,n):this.getTileRangeForExtentAndZ(a,s,n)))return!0;--s}return!1},t.prototype.getExtent=function(){return this.extent_},t.prototype.getMaxZoom=function(){return this.maxZoom},t.prototype.getMinZoom=function(){return this.minZoom},t.prototype.getOrigin=function(t){return this.origin_?this.origin_:this.origins_[t]},t.prototype.getResolution=function(t){return this.resolutions_[t]},t.prototype.getResolutions=function(){return this.resolutions_},t.prototype.getTileCoordChildTileRange=function(t,e,n){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){var i=2*t[1],o=2*t[2];return cr(i,i+1,o,o+1,e)}var r=this.getTileCoordExtent(t,n);return this.getTileRangeForExtentAndZ(r,t[0]+1,e)}return null},t.prototype.getTileRangeExtent=function(t,e,n){var i=this.getOrigin(t),o=this.getResolution(t),r=Qn(this.getTileSize(t),this.tmpSize_),a=i[0]+e.minX*r[0]*o,s=i[0]+(e.maxX+1)*r[0]*o;return It(a,i[1]+e.minY*r[1]*o,s,i[1]+(e.maxY+1)*r[1]*o,n)},t.prototype.getTileRangeForExtentAndZ=function(t,e,n){var i=fr;this.getTileCoordForXYAndZ_(t[0],t[3],e,!1,i);var o=i[1],r=i[2];return this.getTileCoordForXYAndZ_(t[2],t[1],e,!0,i),cr(o,i[1],r,i[2],n)},t.prototype.getTileCoordCenter=function(t){var e=this.getOrigin(t[0]),n=this.getResolution(t[0]),i=Qn(this.getTileSize(t[0]),this.tmpSize_);return[e[0]+(t[1]+.5)*i[0]*n,e[1]-(t[2]+.5)*i[1]*n]},t.prototype.getTileCoordExtent=function(t,e){var n=this.getOrigin(t[0]),i=this.getResolution(t[0]),o=Qn(this.getTileSize(t[0]),this.tmpSize_),r=n[0]+t[1]*o[0]*i,a=n[1]-(t[2]+1)*o[1]*i;return It(r,a,r+o[0]*i,a+o[1]*i,e)},t.prototype.getTileCoordForCoordAndResolution=function(t,e,n){return this.getTileCoordForXYAndResolution_(t[0],t[1],e,!1,n)},t.prototype.getTileCoordForXYAndResolution_=function(t,e,n,i,o){var r=this.getZForResolution(n),a=n/this.getResolution(r),s=this.getOrigin(r),u=Qn(this.getTileSize(r),this.tmpSize_),l=i?.5:0,h=i?.5:0,c=Math.floor((t-s[0])/n+l),p=Math.floor((s[1]-e)/n+h),f=a*c/u[0],d=a*p/u[1];return i?(f=Math.ceil(f)-1,d=Math.ceil(d)-1):(f=Math.floor(f),d=Math.floor(d)),Ho(r,f,d,o)},t.prototype.getTileCoordForXYAndZ_=function(t,e,n,i,o){var r=this.getOrigin(n),a=this.getResolution(n),s=Qn(this.getTileSize(n),this.tmpSize_),u=i?.5:0,l=i?.5:0,h=Math.floor((t-r[0])/a+u),c=Math.floor((r[1]-e)/a+l),p=h/s[0],f=c/s[1];return i?(p=Math.ceil(p)-1,f=Math.ceil(f)-1):(p=Math.floor(p),f=Math.floor(f)),Ho(n,p,f,o)},t.prototype.getTileCoordForCoordAndZ=function(t,e,n){return this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,n)},t.prototype.getTileCoordResolution=function(t){return this.resolutions_[t[0]]},t.prototype.getTileSize=function(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]},t.prototype.getFullTileRange=function(t){return this.fullTileRanges_?this.fullTileRanges_[t]:null},t.prototype.getZForResolution=function(t,e){return dt(E(this.resolutions_,t,e||0),this.minZoom,this.maxZoom)},t.prototype.calculateTileRanges_=function(t){for(var e=this.resolutions_.length,n=new Array(e),i=this.minZoom;i<e;++i)n[i]=this.getTileRangeForExtentAndZ(t,i);this.fullTileRanges_=n},t}();function _r(t){var e=t.getDefaultTileGrid();return e||(e=function(t,e,n,i){return function(t,e,n,i){var o=xt.TOP_LEFT,r=gr(t,void 0,n);return new dr({extent:t,origin:zt(t,o),resolutions:r,tileSize:n})}(vr(t),0,void 0)}(t),t.setDefaultTileGrid(e)),e}function gr(t,e,n){for(var i=void 0!==e?e:pt,o=Xt(t),r=Wt(t),a=Qn(void 0!==n?n:ft),s=Math.max(r/a[0],o/a[1]),u=i+1,l=new Array(u),h=0;h<u;++h)l[h]=s/Math.pow(2,h);return l}function vr(t){var e=(t=Ze(t)).getExtent();if(!e){var n=180*xe[Ce.DEGREES]/t.getMetersPerUnit();e=It(-n,-n,n,n)}return e}var yr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),mr=function(t){function e(e){var n=t.call(this,{attributions:e.attributions,attributionsCollapsible:e.attributionsCollapsible,projection:e.projection,state:e.state,wrapX:e.wrapX})||this;n.opaque_=void 0!==e.opaque&&e.opaque,n.tilePixelRatio_=void 0!==e.tilePixelRatio?e.tilePixelRatio:1,n.tileGrid=void 0!==e.tileGrid?e.tileGrid:null;var i=e.cacheSize;if(void 0===i){var o=[256,256],r=e.tileGrid;r&&Qn(r.getTileSize(r.getMinZoom()),o);var a="undefined"!=typeof screen,s=a?screen.availWidth||screen.width:1920,u=a?screen.availHeight||screen.height:1080;i=4*Math.ceil(s/o[0])*Math.ceil(u/o[1])}return n.tileCache=new Qo(i),n.tmpSize=[0,0],n.key_=e.key||"",n.tileOptions={transition:e.transition},n.zDirection=e.zDirection?e.zDirection:0,n}return yr(e,t),e.prototype.canExpireCache=function(){return this.tileCache.canExpireCache()},e.prototype.expireCache=function(t,e){var n=this.getTileCacheForProjection(t);n&&n.expireCache(e)},e.prototype.forEachLoadedTile=function(t,e,n,i){var o=this.getTileCacheForProjection(t);if(!o)return!1;for(var r,a,s,u=!0,l=n.minX;l<=n.maxX;++l)for(var h=n.minY;h<=n.maxY;++h)a=qo(e,l,h),s=!1,o.containsKey(a)&&(s=(r=o.get(a)).getState()===st.LOADED)&&(s=!1!==i(r)),s||(u=!1);return u},e.prototype.getGutterForProjection=function(t){return 0},e.prototype.getKey=function(){return this.key_},e.prototype.setKey=function(t){this.key_!==t&&(this.key_=t,this.changed())},e.prototype.getOpaque=function(t){return this.opaque_},e.prototype.getResolutions=function(){return this.tileGrid.getResolutions()},e.prototype.getTile=function(t,e,n,o,r){return i()},e.prototype.getTileGrid=function(){return this.tileGrid},e.prototype.getTileGridForProjection=function(t){return this.tileGrid?this.tileGrid:_r(t)},e.prototype.getTileCacheForProjection=function(t){var e=this.getProjection();return e&&!Be(e,t)?null:this.tileCache},e.prototype.getTilePixelRatio=function(t){return this.tilePixelRatio_},e.prototype.getTilePixelSize=function(t,e,n){var i,o,r,a=this.getTileGridForProjection(n),s=this.getTilePixelRatio(e),u=Qn(a.getTileSize(t),this.tmpSize);return 1==s?u:(i=u,o=s,void 0===(r=this.tmpSize)&&(r=[0,0]),r[0]=i[0]*o+.5|0,r[1]=i[1]*o+.5|0,r)},e.prototype.getTileCoordForTileUrlFunction=function(t,e){var n=void 0!==e?e:this.getProjection(),i=this.getTileGridForProjection(n);return this.getWrapX()&&n.isGlobal()&&(t=function(t,e,n){var i=e[0],o=t.getTileCoordCenter(e),r=vr(n);if(St(r,o))return e;var a=Wt(r),s=Math.ceil((r[0]-o[0])/a);return o[0]+=a*s,t.getTileCoordForCoordAndZ(o,i)}(i,t,n)),function(t,e){var n=t[0],i=t[1],o=t[2];if(e.getMinZoom()>n||n>e.getMaxZoom())return!1;var r,a=e.getExtent();return!(r=a?e.getTileRangeForExtentAndZ(a,n):e.getFullTileRange(n))||r.containsXY(i,o)}(t,i)?t:null},e.prototype.clear=function(){this.tileCache.clear()},e.prototype.refresh=function(){this.clear(),t.prototype.refresh.call(this)},e.prototype.useTile=function(t,e,n,i){},e}(lr),Er=function(t){function e(e,n){var i=t.call(this,e)||this;return i.tile=n,i}return yr(e,t),e}(b),Tr=mr,wr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),xr=function(t){function e(e){var n=t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,opaque:e.opaque,projection:e.projection,state:e.state,tileGrid:e.tileGrid,tilePixelRatio:e.tilePixelRatio,wrapX:e.wrapX,transition:e.transition,key:e.key,attributionsCollapsible:e.attributionsCollapsible,zDirection:e.zDirection})||this;return n.generateTileUrlFunction_=!e.tileUrlFunction,n.tileLoadFunction=e.tileLoadFunction,n.tileUrlFunction=e.tileUrlFunction?e.tileUrlFunction.bind(n):ar,n.urls=null,e.urls?n.setUrls(e.urls):e.url&&n.setUrl(e.url),n.tileLoadingKeys_={},n}return wr(e,t),e.prototype.getTileLoadFunction=function(){return this.tileLoadFunction},e.prototype.getTileUrlFunction=function(){return this.tileUrlFunction},e.prototype.getUrls=function(){return this.urls},e.prototype.handleTileChange=function(t){var e,n=t.target,i=r(n),o=n.getState();o==st.LOADING?(this.tileLoadingKeys_[i]=!0,e="tileloadstart"):i in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[i],e=o==st.ERROR?"tileloaderror":o==st.LOADED||o==st.ABORT?"tileloadend":void 0),null!=e&&this.dispatchEvent(new Er(e,n))},e.prototype.setTileLoadFunction=function(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()},e.prototype.setTileUrlFunction=function(t,e){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==e?this.setKey(e):this.changed()},e.prototype.setUrl=function(t){var e=function(t){var e=[],n=/\{([a-z])-([a-z])\}/.exec(t);if(n){var i=n[1].charCodeAt(0),o=n[2].charCodeAt(0),r=void 0;for(r=i;r<=o;++r)e.push(t.replace(n[0],String.fromCharCode(r)));return e}if(n=/\{(\d+)-(\d+)\}/.exec(t)){for(var a=parseInt(n[2],10),s=parseInt(n[1],10);s<=a;s++)e.push(t.replace(n[0],s.toString()));return e}return e.push(t),e}(t);this.urls=e,this.setUrls(e)},e.prototype.setUrls=function(t){this.urls=t;var e=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(function(t,e){for(var n=t.length,i=new Array(n),o=0;o<n;++o)i[o]=rr(t[o],e);return function(t){return 1===t.length?t[0]:function(e,n,i){if(e){var o=mt(function(t){return(t[1]<<t[0])+t[2]}(e),t.length);return t[o](e,n,i)}}}(i)}(t,this.tileGrid),e):this.setKey(e)},e.prototype.useTile=function(t,e,n){var i=qo(t,e,n);this.tileCache.containsKey(i)&&this.tileCache.get(i)},e}(Tr),Cr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function br(t,e){t.getImage().src=e}var Or=function(t){function e(e){var n=t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,opaque:e.opaque,projection:e.projection,state:e.state,tileGrid:e.tileGrid,tileLoadFunction:e.tileLoadFunction?e.tileLoadFunction:br,tilePixelRatio:e.tilePixelRatio,tileUrlFunction:e.tileUrlFunction,url:e.url,urls:e.urls,wrapX:e.wrapX,transition:e.transition,key:e.key,attributionsCollapsible:e.attributionsCollapsible,zDirection:e.zDirection})||this;return n.crossOrigin=void 0!==e.crossOrigin?e.crossOrigin:null,n.tileClass=void 0!==e.tileClass?e.tileClass:Bo,n.tileCacheForProjection={},n.tileGridForProjection={},n.reprojectionErrorThreshold_=e.reprojectionErrorThreshold,n.renderReprojectionEdges_=!1,n}return Cr(e,t),e.prototype.canExpireCache=function(){if(this.tileCache.canExpireCache())return!0;for(var t in this.tileCacheForProjection)if(this.tileCacheForProjection[t].canExpireCache())return!0;return!1},e.prototype.expireCache=function(t,e){var n=this.getTileCacheForProjection(t);for(var i in this.tileCache.expireCache(this.tileCache==n?e:{}),this.tileCacheForProjection){var o=this.tileCacheForProjection[i];o.expireCache(o==n?e:{})}},e.prototype.getGutterForProjection=function(t){return this.getProjection()&&t&&!Be(this.getProjection(),t)?0:this.getGutter()},e.prototype.getGutter=function(){return 0},e.prototype.getOpaque=function(e){return!(this.getProjection()&&e&&!Be(this.getProjection(),e))&&t.prototype.getOpaque.call(this,e)},e.prototype.getTileGridForProjection=function(t){var e=this.getProjection();if(!this.tileGrid||e&&!Be(e,t)){var n=r(t);return n in this.tileGridForProjection||(this.tileGridForProjection[n]=_r(t)),this.tileGridForProjection[n]}return this.tileGrid},e.prototype.getTileCacheForProjection=function(t){var e=this.getProjection();if(!e||Be(e,t))return this.tileCache;var n=r(t);return n in this.tileCacheForProjection||(this.tileCacheForProjection[n]=new Qo(this.tileCache.highWaterMark)),this.tileCacheForProjection[n]},e.prototype.createTile_=function(t,e,n,i,o,r){var a=[t,e,n],s=this.getTileCoordForTileUrlFunction(a,o),u=s?this.tileUrlFunction(s,i,o):void 0,l=new this.tileClass(a,void 0!==u?st.IDLE:st.EMPTY,void 0!==u?u:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return l.key=r,l.addEventListener(P.CHANGE,this.handleTileChange.bind(this)),l},e.prototype.getTile=function(t,e,n,i,o){var r=this.getProjection();if(r&&o&&!Be(r,o)){var a=this.getTileCacheForProjection(o),s=[t,e,n],u=void 0,l=$o(s);a.containsKey(l)&&(u=a.get(l));var h=this.getKey();if(u&&u.key==h)return u;var c=this.getTileGridForProjection(r),p=this.getTileGridForProjection(o),f=this.getTileCoordForTileUrlFunction(s,o),d=new or(r,c,o,p,s,f,this.getTilePixelRatio(i),this.getGutter(),function(t,e,n,i){return this.getTileInternal(t,e,n,i,r)}.bind(this),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_);return d.key=h,u?(d.interimTile=u,d.refreshInterimChain(),a.replace(l,d)):a.set(l,d),d}return this.getTileInternal(t,e,n,i,r||o)},e.prototype.getTileInternal=function(t,e,n,i,o){var r=null,a=qo(t,e,n),s=this.getKey();if(this.tileCache.containsKey(a)){if((r=this.tileCache.get(a)).key!=s){var u=r;r=this.createTile_(t,e,n,i,o,s),u.getState()==st.IDLE?r.interimTile=u.interimTile:r.interimTile=u,r.refreshInterimChain(),this.tileCache.replace(a,r)}}else r=this.createTile_(t,e,n,i,o,s),this.tileCache.set(a,r);return r},e.prototype.setRenderReprojectionEdges=function(t){if(this.renderReprojectionEdges_!=t){for(var e in this.renderReprojectionEdges_=t,this.tileCacheForProjection)this.tileCacheForProjection[e].clear();this.changed()}},e.prototype.setTileGridForProjection=function(t,e){var n=Ze(t);if(n){var i=r(n);i in this.tileGridForProjection||(this.tileGridForProjection[i]=e)}},e}(xr),Sr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Pr=function(t){function e(e){var n=e||{},i=void 0!==n.projection?n.projection:"EPSG:3857",o=void 0!==n.tileGrid?n.tileGrid:function(t){var e=t||{},n=e.extent||Ze("EPSG:3857").getExtent(),i={extent:n,minZoom:e.minZoom,tileSize:e.tileSize,resolutions:gr(n,e.maxZoom,e.tileSize)};return new dr(i)}({extent:vr(i),maxZoom:n.maxZoom,minZoom:n.minZoom,tileSize:n.tileSize});return t.call(this,{attributions:n.attributions,cacheSize:n.cacheSize,crossOrigin:n.crossOrigin,opaque:n.opaque,projection:i,reprojectionErrorThreshold:n.reprojectionErrorThreshold,tileGrid:o,tileLoadFunction:n.tileLoadFunction,tilePixelRatio:n.tilePixelRatio,tileUrlFunction:n.tileUrlFunction,url:n.url,urls:n.urls,wrapX:void 0===n.wrapX||n.wrapX,transition:n.transition,attributionsCollapsible:n.attributionsCollapsible,zDirection:n.zDirection})||this}return Sr(e,t),e}(Or),Rr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ir='&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.',Mr=function(t){function e(e){var n,i=e||{};n=void 0!==i.attributions?i.attributions:[Ir];var o=void 0!==i.crossOrigin?i.crossOrigin:"anonymous",r=void 0!==i.url?i.url:"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png";return t.call(this,{attributions:n,cacheSize:i.cacheSize,crossOrigin:o,opaque:void 0===i.opaque||i.opaque,maxZoom:void 0!==i.maxZoom?i.maxZoom:19,reprojectionErrorThreshold:i.reprojectionErrorThreshold,tileLoadFunction:i.tileLoadFunction,url:r,wrapX:i.wrapX,attributionsCollapsible:!1})||this}return Rr(e,t),e}(Pr),Lr="preload",Ar="useInterimTilesOnError",Dr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Fr=function(t){function e(e){var n=this,i=e||{},o=p({},i);return delete o.preload,delete o.useInterimTilesOnError,(n=t.call(this,o)||this).setPreload(void 0!==i.preload?i.preload:0),n.setUseInterimTilesOnError(void 0===i.useInterimTilesOnError||i.useInterimTilesOnError),n}return Dr(e,t),e.prototype.getPreload=function(){return this.get(Lr)},e.prototype.setPreload=function(t){this.set(Lr,t)},e.prototype.getUseInterimTilesOnError=function(){return this.get(Ar)},e.prototype.setUseInterimTilesOnError=function(t){this.set(Ar,t)},e}(fi),jr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Nr=function(t){function e(e){var n=t.call(this)||this;return n.boundHandleImageChange_=n.handleImageChange_.bind(n),n.layer_=e,n}return jr(e,t),e.prototype.getFeatures=function(t){return i()},e.prototype.prepareFrame=function(t){return i()},e.prototype.renderFrame=function(t,e){return i()},e.prototype.loadedTileCallback=function(t,e,n){t[e]||(t[e]={}),t[e][n.tileCoord.toString()]=n},e.prototype.createLoadedTileFinder=function(t,e,n){return function(i,o){var r=this.loadedTileCallback.bind(this,n,i);return t.forEachLoadedTile(e,i,o,r)}.bind(this)},e.prototype.forEachFeatureAtCoordinate=function(t,e,n,i,o){},e.prototype.getDataAtPixel=function(t,e,n){return i()},e.prototype.getLayer=function(){return this.layer_},e.prototype.handleFontsChanged=function(){},e.prototype.handleImageChange_=function(t){t.target.getState()===Mo.LOADED&&this.renderIfReadyAndVisible()},e.prototype.loadImage=function(t){var e=t.getState();return e!=Mo.LOADED&&e!=Mo.ERROR&&t.addEventListener(P.CHANGE,this.boundHandleImageChange_),e==Mo.IDLE&&(t.load(),e=t.getState()),e==Mo.LOADED},e.prototype.renderIfReadyAndVisible=function(){var t=this.getLayer();t.getVisible()&&t.getSourceState()==Hn.READY&&t.changed()},e}(I),kr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Gr=function(t){function e(e){var n=t.call(this,e)||this;return n.container=null,n.renderedResolution,n.tempTransform_=[1,0,0,1,0,0],n.pixelTransform=[1,0,0,1,0,0],n.inversePixelTransform=[1,0,0,1,0,0],n.context=null,n.containerReused=!1,n.createTransformStringCanvas_=Yn(1,1).canvas,n}return kr(e,t),e.prototype.useContainer=function(t,e,n){var i,o,r=this.getLayer().getClassName();if(t&&""===t.style.opacity&&t.className===r&&(s=t.firstElementChild)instanceof HTMLCanvasElement&&(o=s.getContext("2d")),o&&o.canvas.style.transform===e?(this.container=t,this.context=o,this.containerReused=!0):this.containerReused&&(this.container=null,this.context=null,this.containerReused=!1),!this.container){(i=document.createElement("div")).className=r;var a=i.style;a.position="absolute",a.width="100%",a.height="100%";var s=(o=Yn()).canvas;i.appendChild(s),(a=s.style).position="absolute",a.left="0",a.transformOrigin="top left",this.container=i,this.context=o}},e.prototype.clip=function(t,e,n){var i=e.pixelRatio,o=e.size[0]*i/2,r=e.size[1]*i/2,a=e.viewState.rotation,s=Zt(n),u=Ut(n),l=kt(n),h=Nt(n);sn(e.coordinateToPixelTransform,s),sn(e.coordinateToPixelTransform,u),sn(e.coordinateToPixelTransform,l),sn(e.coordinateToPixelTransform,h),t.save(),Ro(t,-a,o,r),t.beginPath(),t.moveTo(s[0]*i,s[1]*i),t.lineTo(u[0]*i,u[1]*i),t.lineTo(l[0]*i,l[1]*i),t.lineTo(h[0]*i,h[1]*i),t.clip(),Ro(t,a,o,r)},e.prototype.clipUnrotated=function(t,e,n){var i=Zt(n),o=Ut(n),r=kt(n),a=Nt(n);sn(e.coordinateToPixelTransform,i),sn(e.coordinateToPixelTransform,o),sn(e.coordinateToPixelTransform,r),sn(e.coordinateToPixelTransform,a);var s=this.inversePixelTransform;sn(s,i),sn(s,o),sn(s,r),sn(s,a),t.save(),t.beginPath(),t.moveTo(Math.round(i[0]),Math.round(i[1])),t.lineTo(Math.round(o[0]),Math.round(o[1])),t.lineTo(Math.round(r[0]),Math.round(r[1])),t.lineTo(Math.round(a[0]),Math.round(a[1])),t.clip()},e.prototype.dispatchRenderEvent_=function(t,e,n){var i=this.getLayer();if(i.hasListener(t)){var o=new go(t,this.inversePixelTransform,n,e);i.dispatchEvent(o)}},e.prototype.preRender=function(t,e){this.dispatchRenderEvent_("prerender",t,e)},e.prototype.postRender=function(t,e){this.dispatchRenderEvent_("postrender",t,e)},e.prototype.getRenderTransform=function(t,e,n,i,o,r,a){var s=o/2,u=r/2,l=i/e,h=-l,c=-t[0]+a,p=-t[1];return un(this.tempTransform_,s,u,l,h,-n,c,p)},e.prototype.getDataAtPixel=function(t,e,n){var i,o=sn(this.inversePixelTransform,t.slice()),r=this.context;try{i=r.getImageData(Math.round(o[0]),Math.round(o[1]),1,1).data}catch(t){return"SecurityError"===t.name?new Uint8Array:i}return 0===i[3]?null:i},e.prototype.createTransformString=function(t){return this.createTransformStringCanvas_.style.transform="matrix("+t.join(", ")+")",this.createTransformStringCanvas_.style.transform},e}(Nr),zr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Kr=function(t){function e(e){var n=t.call(this,e)||this;return n.extentChanged=!0,n.renderedExtent_=null,n.renderedPixelRatio,n.renderedProjection=null,n.renderedRevision,n.renderedTiles=[],n.newTiles_=!1,n.tmpExtent=[1/0,1/0,-1/0,-1/0],n.tmpTileRange_=new pr(0,0,0,0),n}return zr(e,t),e.prototype.isDrawableTile=function(t){var e=this.getLayer(),n=t.getState(),i=e.getUseInterimTilesOnError();return n==st.LOADED||n==st.EMPTY||n==st.ERROR&&!i},e.prototype.getTile=function(t,e,n,i){var o=i.pixelRatio,r=i.viewState.projection,a=this.getLayer(),s=a.getSource().getTile(t,e,n,o,r);return s.getState()==st.ERROR&&(a.getUseInterimTilesOnError()?a.getPreload()>0&&(this.newTiles_=!0):s.setState(st.LOADED)),this.isDrawableTile(s)||(s=s.getInterimTile()),s},e.prototype.loadedTileCallback=function(e,n,i){return!!this.isDrawableTile(i)&&t.prototype.loadedTileCallback.call(this,e,n,i)},e.prototype.prepareFrame=function(t){return!!this.getLayer().getSource()},e.prototype.renderFrame=function(t,e){var n=t.layerStatesArray[t.layerIndex],i=t.viewState,o=i.projection,a=i.resolution,s=i.center,u=i.rotation,l=t.pixelRatio,h=this.getLayer(),c=h.getSource(),p=c.getRevision(),f=c.getTileGridForProjection(o),d=f.getZForResolution(a,c.zDirection),_=f.getResolution(d),g=t.extent,v=n.extent&&an(n.extent,o);v&&(g=Yt(g,an(n.extent,o)));var y=c.getTilePixelRatio(l),E=Math.round(t.size[0]*y),T=Math.round(t.size[1]*y);if(u){var w=Math.round(Math.sqrt(E*E+T*T));E=w,T=w}var x=_*E/2/y,C=_*T/2/y,b=[s[0]-x,s[1]-C,s[0]+x,s[1]+C],O=f.getTileRangeForExtentAndZ(g,d),S={};S[d]={};var P=this.createLoadedTileFinder(c,o,S),R=this.tmpExtent,I=this.tmpTileRange_;this.newTiles_=!1;for(var M=O.minX;M<=O.maxX;++M)for(var L=O.minY;L<=O.maxY;++L){var A=this.getTile(d,M,L,t);if(this.isDrawableTile(A)){var D=r(this);if(A.getState()==st.LOADED){S[d][A.tileCoord.toString()]=A;var F=A.inTransition(D);this.newTiles_||!F&&-1!==this.renderedTiles.indexOf(A)||(this.newTiles_=!0)}if(1===A.getAlpha(D,t.time))continue}var j=f.getTileCoordChildTileRange(A.tileCoord,I,R),N=!1;j&&(N=P(d+1,j)),N||f.forEachTileCoordParentTileRange(A.tileCoord,P,I,R)}var k=_/a;un(this.pixelTransform,t.size[0]/2,t.size[1]/2,1/y,1/y,u,-E/2,-T/2);var G=this.createTransformString(this.pixelTransform);this.useContainer(e,G,n.opacity);var z=this.context,K=z.canvas;ln(this.inversePixelTransform,this.pixelTransform),un(this.tempTransform_,E/2,T/2,k,k,0,-E/2,-T/2),K.width!=E||K.height!=T?(K.width=E,K.height=T):this.containerReused||z.clearRect(0,0,E,T),v&&this.clipUnrotated(z,t,v),this.preRender(z,t),this.renderedTiles.length=0;var X,Y,Z,U=Object.keys(S).map(Number);U.sort(m),1!==n.opacity||this.containerReused&&!c.getOpaque(t.viewState.projection)?(X=[],Y=[]):U=U.reverse();for(var W=U.length-1;W>=0;--W){var V=U[W],B=c.getTilePixelSize(V,l,o),H=f.getResolution(V)/_,q=B[0]*H*k,$=B[1]*H*k,J=f.getTileCoordForCoordAndZ(Zt(b),V),Q=f.getTileCoordExtent(J),tt=sn(this.tempTransform_,[y*(Q[0]-b[0])/_,y*(b[3]-Q[3])/_]),et=y*c.getGutterForProjection(o),nt=S[V];for(var it in nt){var ot=(A=nt[it]).tileCoord,rt=tt[0]-(J[1]-ot[1])*q,at=Math.round(rt+q),ut=tt[1]-(J[2]-ot[2])*$,lt=Math.round(ut+$),ht=at-(M=Math.round(rt)),ct=lt-(L=Math.round(ut)),pt=d===V;if(!(F=pt&&1!==A.getAlpha(r(this),t.time)))if(X){z.save(),Z=[M,L,M+ht,L,M+ht,L+ct,M,L+ct];for(var ft=0,dt=X.length;ft<dt;++ft)if(d!==V&&V<Y[ft]){var _t=X[ft];z.beginPath(),z.moveTo(Z[0],Z[1]),z.lineTo(Z[2],Z[3]),z.lineTo(Z[4],Z[5]),z.lineTo(Z[6],Z[7]),z.moveTo(_t[6],_t[7]),z.lineTo(_t[4],_t[5]),z.lineTo(_t[2],_t[3]),z.lineTo(_t[0],_t[1]),z.clip()}X.push(Z),Y.push(V)}else z.clearRect(M,L,ht,ct);this.drawTileImage(A,t,M,L,ht,ct,et,pt,n.opacity),X&&!F&&z.restore(),this.renderedTiles.push(A),this.updateUsedTiles(t.usedTiles,c,A)}}return this.renderedRevision=p,this.renderedResolution=_,this.extentChanged=!this.renderedExtent_||!Lt(this.renderedExtent_,b),this.renderedExtent_=b,this.renderedPixelRatio=l,this.renderedProjection=o,this.manageTilePyramid(t,c,f,l,o,g,d,h.getPreload()),this.updateCacheSize_(t,c),this.scheduleExpireCache(t,c),this.postRender(z,t),n.extent&&z.restore(),G!==K.style.transform&&(K.style.transform=G),this.container},e.prototype.drawTileImage=function(t,e,n,i,o,a,s,u,l){var h=this.getTileImage(t);if(h){var c=r(this),p=u?t.getAlpha(c,e.time):1,f=l*p,d=f!==this.context.globalAlpha;d&&(this.context.save(),this.context.globalAlpha=f),this.context.drawImage(h,s,s,h.width-2*s,h.height-2*s,n,i,o,a),d&&this.context.restore(),1!==p?e.animate=!0:u&&t.endTransition(c)}},e.prototype.getImage=function(){var t=this.context;return t?t.canvas:null},e.prototype.getTileImage=function(t){return t.getImage()},e.prototype.scheduleExpireCache=function(t,e){if(e.canExpireCache()){var n=function(t,e,n){var i=r(t);i in n.usedTiles&&t.expireCache(n.viewState.projection,n.usedTiles[i])}.bind(null,e);t.postRenderFunctions.push(n)}},e.prototype.updateUsedTiles=function(t,e,n){var i=r(e);i in t||(t[i]={}),t[i][n.getKey()]=!0},e.prototype.updateCacheSize_=function(t,e){var n=r(e),i=0;n in t.usedTiles&&(i+=Object.keys(t.usedTiles[n]).length),n in t.wantedTiles&&(i+=Object.keys(t.wantedTiles[n]).length);var o=e.tileCache;o.highWaterMark<i&&(o.highWaterMark=i)},e.prototype.manageTilePyramid=function(t,e,n,i,o,a,s,u,l){var h=r(e);h in t.wantedTiles||(t.wantedTiles[h]={});var c,p,f,d,_,g,v=t.wantedTiles[h],y=t.tileQueue;for(g=n.getMinZoom();g<=s;++g)for(p=n.getTileRangeForExtentAndZ(a,g,p),f=n.getResolution(g),d=p.minX;d<=p.maxX;++d)for(_=p.minY;_<=p.maxY;++_)s-g<=u?((c=e.getTile(g,d,_,i,o)).getState()==st.IDLE&&(v[c.getKey()]=!0,y.isKeyQueued(c.getKey())||y.enqueue([c,h,n.getTileCoordCenter(c.tileCoord),f])),void 0!==l&&l(c)):e.useTile(g,d,_,o)},e}(Gr);Kr.prototype.getLayer;var Xr=Kr,Yr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Zr=function(t){function e(e){return t.call(this,e)||this}return Yr(e,t),e.prototype.createRenderer=function(){return new Xr(this)},e}(Fr);const Ur="https://api.openweathermap.org/data/2.5/",Wr="5324d62b494ffe8e50d87360e5f4e6aa",Vr="https://api.opencagedata.com/geocode/v1/json?q=",Br="462ceef9bb0d4f66bf5e3e5585384469",Hr="31cbc1e66d20a95fa11e4f25263a256ccff43f72aa78b5690a1ef466dbd1a191",qr=document.getElementById("coordinates"),$r=document.getElementById("location"),Jr=document.getElementById("temperature"),Qr=document.querySelector("#weather_icon img"),ta=document.getElementById("description"),ea=document.querySelectorAll(".next_day"),na=document.getElementById("btn_search_for_town"),ia=document.getElementById("search_town_field"),oa=document.getElementById("btn_change_bg"),ra=document.getElementById("btn_switch_unit"),aa=document.getElementById("btn_voice_search"),sa=document.getElementById("languageSelect"),ua=["winter","spring","summer","autumn"],la=["night","morning","day","evening"],ha={en:{dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],temp:"Temp",feelsLike:"Feels like",wind:"Wind",windSpeedUnit:"m/s",humidity:"Humidity",longitude:"Longitude",latitude:"Latitude",btnBackground:"Background",btnVoice:"Voice",btnSearch:"Search",searchTown:"Search town"},ru:{dayNames:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],temp:"Температура",feelsLike:"Ощущение",wind:"Ветер",windSpeedUnit:"м/с",humidity:"Влажность",longitude:"Долгота",latitude:"Широта",btnBackground:"Фон",btnVoice:"Голос",btnSearch:"Поиск",searchTown:"Поиск города"},be:{dayNames:["Нядзеля","Панядзелак","Аўторак","Серада","Чацвер","Пятніца","Субота"],monthNames:["Студзень","Люты","Сакавік","Красавік","Май","Чэрвень","Ліпень","Жнівень","Верасень","Кастрычнік","Лістапад","Снежань"],temp:"Тэмпература",feelsLike:"Падобна",wind:"Вецер",windSpeedUnit:"м/с",humidity:"Вільготнасць",longitude:"Даўгата",latitude:"Шырата",btnBackground:"Фон",btnVoice:"Голас",btnSearch:"Пошук",searchTown:"Пошук горада"}};let ca,pa,fa,da,_a,ga="en",va=new Date,ya=new Date,ma=0,Ea=0,Ta="metric";function wa(){$r.querySelector("div:last-of-type").innerText=`${ha[ga].dayNames[ya.getDay()]} ${ya.getDate()} ${ha[ga].monthNames[ya.getMonth()]}, ${`0${ya.getHours()}`.slice(-2)}:${`0${ya.getMinutes()}`.slice(-2)}`}async function xa(){let t;t=await fetch(`${Ur}weather?lat=${Ea}&lon=${ma}&lang=${ga}&units=${Ta}&APPID=${Wr}`),fa=await t.json(),Jr.innerText=`${ha[ga].temp}:\n    ${Math.round(fa.main.temp)} ${"metric"===Ta?"°С":"°F"}`,Qr.src=`http://openweathermap.org/img/wn/${fa.weather[0].icon}@2x.png`,ta.innerText=`${ha[ga].feelsLike}: ${Math.round(fa.main.feels_like)} ${"metric"===Ta?"°С":"°F"}\n    ${ha[ga].wind}: ${"metric"===Ta?Math.round(fa.wind.speed):Math.round(fa.wind.speed/2.237)} ${ha[ga].windSpeedUnit} \n    ${ha[ga].humidity}: ${fa.main.humidity} %`;const e=va.getTime()+6e4*va.getTimezoneOffset();ya=new Date(e+36e5*fa.timezone/3600),$r.querySelector("div:first-of-type").innerText=`${Object.prototype.hasOwnProperty.call(pa.results[0].components,"city")?pa.results[0].components.city:pa.results[0].components.state}, ${pa.results[0].components.country}`,wa(),t=await fetch(`${Ur}forecast?lat=${Ea}&lon=${ma}&lang=${ga}&units=${Ta}&APPID=${Wr}`),da=await t.json();const n=new Date(ya);n.setDate(n.getDate()+1),n.setHours(0,0,0,0),ea.forEach(t=>{for(let e=0;e<da.list.length;e+=1)if(new Date(1e3*da.list[e].dt).toUTCString()===n.toUTCString()){const i=t;let o=0;for(let t=e;t-e<8;t+=1)o+=da.list[t].main.temp;i.querySelector("span").innerText=`${ha[ga].dayNames[n.getDay()]}\n          ${Math.round(o/8)} ${"metric"===Ta?"°С":"°F"}`,i.querySelector("img").src=`http://openweathermap.org/img/wn/${da.list[e].weather[0].icon}.png`,n.setDate(n.getDate()+1);break}})}async function Ca(t,e=!0){ga=document.querySelector("option:checked").value,oa.innerText=ha[ga].btnBackground,na.innerText=ha[ga].btnSearch,aa.innerText=ha[ga].btnVoice,ia.placeholder=ha[ga].searchTown;const n=await fetch(`${Vr+t}&key=${Br}&pretty=1&no_annotations=1&language=${ga}`);if(pa=await n.json(),0===pa.results.length)throw new Error("Specified town do not exist.");ma=pa.results[0].geometry.lng,Ea=pa.results[0].geometry.lat,e&&(_a.getView().setCenter($e([ma,Ea],"EPSG:4326","EPSG:3857")),_a.getView().setZoom(12)),qr.innerText=`${ha[ga].longitude}: ${Math.floor(ma)}° ${Math.round(100*(ma-Math.floor(ma)))}' \n ${ha[ga].latitude}: ${Math.floor(Ea)}° ${Math.round(100*(Ea-Math.floor(Ea)))}'`,await xa()}async function ba(){const t=new Date(ya);11===t.getMonth()&&t.setMonth(-1),t.setMonth(t.getMonth()+1);const e=Math.floor(t.getMonth()/3);t.setHours(t.getHours()+3);const n=Math.floor(t.getHours()/6),i=`${`https://api.unsplash.com/photos/random?orientation=landscape&query=${la[n]}+${ua[e]}`}&client_id=${Hr}`;let o;try{const t=await fetch(i);o=(await t.json()).urls.regular}catch(t){o="https://sun9-52.userapi.com/c849124/v849124744/6bc67/WaZokvSNKZ8.jpg"}document.querySelector("body").style=`background-image: url("${o}");`}!async function(){ga=JSON.parse(localStorage.getItem("curLang")),Ta=JSON.parse(localStorage.getItem("tempUnit")),null===ga&&(ga="en"),null===Ta&&(Ta="metric"),document.getElementById("languageSelect").value=ga;const t=await fetch("https://ipinfo.io/json?token=09f4aded924de8");ca=await t.json(),_a=new ko({layers:[new Zr({source:new Mr})],target:"map",view:new Xn({center:[0,0],zoom:12})}),Ca(ca.city).catch(()=>{ca.city="Minsk",Ca(ca.city)}).then(()=>{ba()})}(),na.addEventListener("click",()=>{ia.value.length>1&&Ca(ia.value).catch(()=>{}).then(()=>{_a.getView().setCenter($e([ma,Ea],"EPSG:4326","EPSG:3857")),_a.getView().setZoom(12)})}),oa.addEventListener("click",()=>{ba()}),ra.addEventListener("click",()=>{Ta="metric"===Ta?"imperial":"metric",xa(Object.prototype.hasOwnProperty.call(pa.results[0].components,"city")?pa.results[0].components.city:pa.results[0].components.state)}),aa.addEventListener("click",()=>{window.SpeechRecognition=window.webkitSpeechRecognition||window.SpeechRecognition;const t=new window.SpeechRecognition;t.continuous=!1,t.interimResults=!1,t.lang="en-US",t.start(),t.onresult=t=>{ia.value=t.results[0][0].transcript}}),sa.addEventListener("change",()=>{Ca(Object.prototype.hasOwnProperty.call(pa.results[0].components,"city")?pa.results[0].components.city:pa.results[0].components.state,!1)}),window.onbeforeunload=()=>{localStorage.setItem("curLang",JSON.stringify(ga)),localStorage.setItem("tempUnit",JSON.stringify(Ta))},setInterval(()=>{va=new Date;const t=va.getTime()+6e4*va.getTimezoneOffset();ya=new Date(t+36e5*fa.timezone/3600),wa()},6e4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,